カテゴリ,ファイル名,主要機能,詳細説明,技術要素,関連モデル,処理フロー,入出力,ビジネスロジック,エラーハンドリング,パフォーマンス考慮
コアシステム・アプリケーション基盤,app.py,Flaskアプリケーション設定・データベース初期化,Flask WebアプリケーションのメインエントリーポイントでSQLAlchemyデータベース接続・セッション管理・CORS設定・文字列正規化処理を実装,Flask + SQLAlchemy + PostgreSQL,全モデル,1.環境変数読み込み→2.Flaskアプリ初期化→3.データベース接続設定→4.イベントリスナー登録→5.セッション設定→6.アプリケーション起動,入力：環境変数 / 出力：初期化済みFlaskアプリケーション,アプリケーション全体の設定管理・データベース接続管理・セッション管理・セキュリティ設定,データベース接続エラー・環境変数未設定・セッション暗号化エラーのハンドリング,接続プール最適化・セッション管理効率化・メモリ使用量最適化
コアシステム・アプリケーション基盤,main.py,アプリケーションエントリーポイント,Gunicornサーバー起動時に実行されるメインファイル・app.pyからFlaskインスタンスをインポートしてWebサーバーを起動,Gunicorn + Flask,なし,1.app.pyインポート→2.Flaskアプリケーション取得→3.Gunicornワーカープロセス起動,入力：Gunicorn起動コマンド / 出力：起動済みWebアプリケーション,本番環境でのWebアプリケーション起動・WSGIサーバーとの連携,インポートエラー・アプリケーション初期化失敗・ポート競合エラーのハンドリング,最小限のオーバーヘッド・高速起動・メモリ効率
コアシステム・アプリケーション基盤,models.py,データベースモデル定義,全データベーステーブルのSQLAlchemyモデル定義・JA情報・CSV財務データ・標準勘定科目・マッピング・残高・分析結果・計算式テーブルを含む,SQLAlchemy ORM + PostgreSQL,JA・CSVData・StandardAccount・AccountMapping・StandardAccountBalance・AnalysisResult・AccountFormula,1.モデルクラス定義→2.テーブル構造定義→3.リレーションシップ設定→4.制約条件設定→5.インデックス作成,入力：Pythonクラス定義 / 出力：データベーステーブル構造・ORMオブジェクト,データベース設計・テーブル関係定義・データ整合性保証・ビジネスルール実装,外部キー制約違反・一意制約違反・データ型エラー・NULL制約エラーのハンドリング,インデックス最適化・クエリ性能向上・メモリ効率的なリレーションシップ
コアシステム・アプリケーション基盤,routes.py,Webルーティング・画面表示制御,Flask Webルーティング定義・メインダッシュボード・勘定科目残高一覧・財務分析画面・JA比較分析・データ管理画面・CSVアップロード処理を含む全画面制御,Flask Routing + Jinja2 Templates,JA・CSVData・StandardAccountBalance,1.HTTPリクエスト受信→2.ルート判定→3.認証チェック→4.ビジネスロジック実行→5.テンプレートレンダリング→6.HTTPレスポンス返却,入力：HTTPリクエスト・フォームデータ / 出力：HTMLレスポンス・リダイレクト・JSONデータ,画面表示制御・ユーザー操作処理・データ表示・フォーム処理・ファイルアップロード,404エラー・500エラー・ファイルアップロードエラー・セッションタイムアウトのハンドリング,テンプレートキャッシュ・静的ファイル最適化・レスポンス圧縮
財務分析・計算エンジン,financial_indicators.py,財務指標計算エンジン,5カテゴリの財務指標計算エンジン・流動性指標・収益性指標・安全性指標・効率性指標・キャッシュフロー指標・前年度比較・リスクスコア算出機能,Python数値計算 + 財務分析理論,StandardAccountBalance・AnalysisResult,1.残高データ取得→2.指標別計算実行→3.前年度データ取得→4.比較分析→5.リスクスコア算出→6.結果保存,入力：JAコード・年度・財務諸表データ / 出力：計算済み財務指標・リスクスコア・比較分析結果,財務理論に基づく指標計算・業界標準との比較・リスク評価・トレンド分析,ゼロ除算エラー・データ不足・計算オーバーフロー・精度誤差のハンドリング,計算処理最適化・メモリ効率的な数値処理・並列計算・キャッシュ活用
財務分析・計算エンジン,risk_analyzer.py,リスクスコア算出・評価分析,カテゴリ別リスクレベル評価・総合リスクスコア計算・業界ベンチマークとの比較・リスク要因特定・改善提案生成・レーダーチャート用データ作成機能,統計分析 + リスク評価理論,AnalysisResult・StandardAccountBalance,1.財務指標データ取得→2.リスクスコア計算→3.カテゴリ別評価→4.総合リスク判定→5.ベンチマーク比較→6.改善提案生成,入力：財務指標データ・業界ベンチマーク / 出力：リスクスコア・評価レポート・改善提案,リスク評価モデル・統計的分析・異常検知・傾向分析・予測分析・意思決定支援,データ不整合・計算エラー・モデル精度低下・異常値処理のハンドリング,高速リスク計算・リアルタイム分析・メモリ効率的な統計処理
財務分析・計算エンジン,account_calculator.py,勘定科目合計値計算,勘定科目の合計値計算エンジン・資産の部合計・負債の部合計・純資産の部合計計算・計算式定義管理・優先度付き計算順序制御機能,計算式エンジン + 勘定体系理論,StandardAccountBalance・AccountFormula,1.計算式定義読み込み→2.依存関係分析→3.計算順序決定→4.階層計算実行→5.合計値算出→6.結果検証,入力：勘定科目残高データ・計算式定義 / 出力：計算済み合計値・階層構造データ,勘定体系に基づく計算・階層構造処理・依存関係管理・計算精度保証,計算式エラー・循環参照・依存関係エラー・計算精度エラーのハンドリング,効率的な階層計算・メモリ最適化・計算キャッシュ
データ処理・インポート,data_processor.py,CSVデータ処理・インポート,CSV財務データの読み込み・データ形式検証・欠損データ処理・データ型変換・エラーレポート生成・JA財務データのインポート処理・データ品質チェック機能,Pandas + CSV処理 + データ検証,CSVData・JA,1.CSVファイル読み込み→2.エンコーディング検出→3.データ形式検証→4.データ変換→5.品質チェック→6.データベース保存,入力：CSVファイル・インポート設定 / 出力：インポート済みデータ・エラーレポート,データ品質管理・形式標準化・重複除去・欠損値処理・データ変換・整合性チェック,ファイル読み込みエラー・エンコーディングエラー・データ形式エラーのハンドリング,大容量ファイル対応・メモリ効率的な処理・並列処理
AI・自動マッピング機能,ai_account_mapper.py,AI支援勘定科目自動マッピング,Azure OpenAI API連携による勘定科目自動マッピング・完全一致マッピング・AI支援マッピング・文字列類似度マッピング・バッチ処理対応・マッピング結果統計機能,Azure OpenAI API + 自然言語処理,CSVData・StandardAccount・AccountMapping,1.未マッピング科目抽出→2.文字列正規化→3.完全一致チェック→4.AIマッピング実行→5.信頼度評価→6.結果保存,入力：未マッピング勘定科目・標準勘定科目マスタ / 出力：マッピング結果・信頼度スコア・処理統計,AIによる自然言語理解・パターン認識・類似度計算・学習データ活用・マッピング精度向上,API接続エラー・認証エラー・レート制限・AI応答エラーのハンドリング,API呼び出し最適化・バッチ処理・キャッシュ活用・並列処理
バックアップ・データ保護,backup_system.py,データバックアップ・リストア,マッピングデータバックアップ・残高データバックアップ・JSON形式での保存・既存データ確認機能・詳細復元レポート・データ整合性チェック・バックアップファイル管理機能,JSON処理 + ファイル操作 + データ保護,AccountMapping・StandardAccountBalance・CSVData,1.バックアップ対象選択→2.データ抽出→3.JSONシリアライズ→4.圧縮・暗号化→5.ファイル保存→6.世代管理,入力：バックアップ対象・設定情報 / 出力：バックアップファイル・検証レポート・管理情報,データ保護・世代管理・整合性保証・復元可能性確保・セキュリティ確保,ファイル書き込みエラー・ディスク容量不足・暗号化エラーのハンドリング,効率的なデータ圧縮・高速バックアップ・最小ディスク使用量
バックアップ・データ保護,backup_api.py,バックアップ機能API,バックアップ作成API・バックアップ一覧取得API・データ復元API・2段階確認プロンプト・エラーハンドリング・RESTful API設計・セキュリティ確認機能,REST API + セキュリティ + 確認プロセス,AccountMapping・StandardAccountBalance,1.APIリクエスト受信→2.認証・承認→3.2段階確認→4.バックアップ処理実行→5.結果検証→6.レスポンス生成,入力：APIリクエスト・認証情報 / 出力：APIレスポンス・処理結果・監査ログ,セキュリティ確保・操作確認・権限管理・監査証跡・データ保護・誤操作防止,認証エラー・権限不足・確認不備・処理失敗のハンドリング,APIレスポンス最適化・セキュリティ処理効率化
API・エンドポイント,api_endpoints.py,REST APIエンドポイント定義,リスクデータ取得API・勘定科目データ取得API・JA比較分析API・キャッシュクリアAPI・レスポンス形式統一・JSON形式データ提供・CORS対応機能,REST API + JSON + CORS,AnalysisResult・StandardAccountBalance・JA,1.APIリクエスト受信→2.パラメータ検証→3.ビジネスロジック実行→4.データ取得・加工→5.JSONレスポンス生成→6.CORSヘッダ設定,入力：HTTPリクエスト・APIパラメータ / 出力：JSONレスポンス・ステータスコード,RESTful設計・データ提供・フォーマット統一・エラー処理・性能最適化・CORS対応,パラメータエラー・データ取得エラー・JSONシリアライズエラーのハンドリング,高速レスポンス・効率的なデータ取得・JSON最適化
テスト・検証,test_ai_mapper.py,AIマッパーテスト,AIマッピング機能の動作テスト・マッピング精度検証・API接続テスト・マッピング結果の妥当性確認・性能テスト機能,テスト自動化 + AI機能検証,AccountMapping・StandardAccount,1.テスト環境準備→2.AIマッピング実行→3.結果検証→4.精度測定→5.性能評価→6.レポート生成,入力：テストデータ・期待結果 / 出力：テスト結果・精度レポート・性能データ,AIマッピング品質保証・精度管理・性能検証・回帰テスト・品質向上,AIテストエラー・精度不足・性能劣化・テスト失敗のハンドリング,高速テスト実行・効率的な検証・自動化テスト
テスト・検証,test_api.py,API機能テスト,REST APIエンドポイントの動作テスト・API応答確認・エラーハンドリングテスト・API性能テスト・レスポンス形式検証機能,API テスト + 機能検証,全モデル,1.APIテスト準備→2.エンドポイント呼び出し→3.レスポンス検証→4.エラーテスト→5.性能測定→6.テストレポート,入力：APIリクエスト・テストケース / 出力：API テスト結果・性能データ・品質レポート,API品質保証・機能検証・性能管理・エラー処理確認・信頼性向上,API テストエラー・接続失敗・レスポンス異常・性能劣化のハンドリング,高速API テスト・効率的な検証・並列テスト実行
初期化・設定,initialize_account_formulas.py,勘定科目計算式初期化,勘定科目計算式の初期設定・階層計算式定義・依存関係設定・計算順序管理・合計科目計算式の自動生成機能,計算式管理 + 初期化処理,AccountFormula・StandardAccount,1.計算式定義読み込み→2.依存関係分析→3.計算順序決定→4.式パラメータ設定→5.データベース保存→6.初期化完了,入力：計算式定義・設定パラメータ / 出力：初期化済み計算式・依存関係データ,計算式システムの初期化・依存関係管理・計算順序制御・式定義管理,計算式エラー・依存関係循環・初期化失敗・データ競合のハンドリング,効率的な初期化・計算式最適化・依存関係処理最適化
初期化・設定,initialize_ja_data.py,JAデータ初期化,JA（農業協同組合）マスタデータの初期化・基本JA情報設定・組織構造初期化・JAコード体系設定・初期データ作成機能,JA マスタ初期化 + 組織管理,JA,1.JA定義読み込み→2.組織構造設定→3.基本情報初期化→4.コード体系設定→5.データベース保存→6.初期化検証,入力：JA定義・組織情報 / 出力：初期化済みJAマスタ・組織構造データ,JAマスタデータ管理・組織構造初期化・コード体系管理・基本情報設定,初期化エラー・データ重複・組織構造エラー・コード競合のハンドリング,効率的なマスタ初期化・組織データ最適化・コード管理最適化
初期化・設定,initialize_ja_data_direct.py,JA直接データ初期化,データベースに直接JAデータを初期化・高速初期化処理・SQL最適化・一括JA登録・直接データベース操作機能,直接初期化 + SQL最適化,JA,1.直接初期化準備→2.SQL最適化→3.一括データ作成→4.高速初期化→5.直接保存→6.初期化検証,入力：JAデータ・初期化設定 / 出力：初期化結果・処理統計・検証レポート,高速JA初期化・直接データベース操作・一括処理・効率化,直接処理エラー・SQL失敗・一括処理問題・初期化失敗のハンドリング,最高速初期化・SQL最適化・直接処理効率化
初期化・設定,initialize_standard_accounts.py,標準勘定科目初期化,標準勘定科目マスタの初期化・勘定科目体系構築・階層関係初期化・表示順序設定・標準分類初期化機能,標準勘定科目管理 + 体系初期化,StandardAccount,1.標準科目定義読み込み→2.体系構造初期化→3.階層関係設定→4.表示順序初期化→5.分類設定→6.初期化完了,入力：標準科目定義・体系設定 / 出力：初期化済み標準科目・体系構造データ,標準勘定科目体系の初期化・階層管理・分類制御・表示管理,初期化エラー・体系不整合・階層問題・分類エラーのハンドリング,効率的な体系初期化・階層処理最適化・分類管理最適化
再計算・更新処理,recalculate_all_ja_efficiency.py,全JA効率性指標再計算,全農業協同組合の効率性指標一括再計算・総資産回転率・売上高営業利益率等の効率性指標更新・一括処理による効率化機能,効率性指標 + 一括再計算,AnalysisResult・StandardAccountBalance,1.全JA抽出→2.効率性指標計算→3.一括更新→4.結果検証→5.品質チェック→6.完了報告,入力：全JAデータ・計算設定 / 出力：更新済み効率性指標・処理統計・品質レポート,効率性分析・一括計算・指標更新・品質保証・処理効率化,計算エラー・更新失敗・品質不足・処理中断のハンドリング,並列計算処理・効率的な一括更新・メモリ最適化
再計算・更新処理,recalculate_efficiency_indicators.py,効率性指標再計算,効率性指標の個別再計算・総資産回転率・固定資産回転率・売上高営業利益率の再計算・精度向上処理機能,効率性計算 + 精度管理,AnalysisResult・StandardAccountBalance,1.対象指標特定→2.計算式検証→3.効率性指標計算→4.精度確認→5.結果更新→6.品質評価,入力：効率性計算データ・精度設定 / 出力：再計算済み指標・精度レポート・品質評価,効率性理論・計算精度・指標管理・品質向上・信頼性確保,効率性計算エラー・精度不足・更新失敗・品質劣化のハンドリング,高速効率性計算・精度最適化・計算効率化
再計算・更新処理,recalculate_indicators.py,財務指標全般再計算,全財務指標カテゴリの再計算・流動性・収益性・安全性・効率性・キャッシュフロー指標の一括再計算・総合的な財務分析更新機能,総合財務分析 + 一括再計算,AnalysisResult・StandardAccountBalance,1.全指標抽出→2.カテゴリ別計算→3.一括再計算→4.総合分析→5.結果統合→6.品質確認,入力：全財務データ・計算設定 / 出力：再計算済み全指標・総合分析結果・品質レポート,総合財務分析・多角的指標計算・包括的評価・品質管理・信頼性向上,総合計算エラー・指標不整合・更新失敗・品質問題のハンドリング,並列指標計算・効率的な総合処理・最適化された分析
再計算・更新処理,recalculate_liquidity_indicators.py,流動性指標再計算,流動性指標の再計算・流動比率・当座比率・現金比率の更新・流動性分析の精度向上・短期支払能力評価機能,流動性分析 + 精度向上,AnalysisResult・StandardAccountBalance,1.流動性データ抽出→2.比率計算→3.精度検証→4.指標更新→5.分析結果生成→6.品質評価,入力：流動性関連データ・計算基準 / 出力：更新済み流動性指標・分析結果・品質レポート,流動性理論・短期支払能力分析・比率計算・精度管理・信頼性確保,流動性計算エラー・比率エラー・更新失敗・精度不足のハンドリング,高速流動性計算・効率的な比率処理・精度最適化
再計算・更新処理,recalculate_profitability_indicators.py,収益性指標再計算,収益性指標の再計算・総資産利益率・自己資本利益率・売上高営業利益率の更新・収益性分析精度向上機能,収益性分析 + 精度向上,AnalysisResult・StandardAccountBalance,1.収益性データ抽出→2.利益率計算→3.精度検証→4.指標更新→5.収益性分析→6.品質評価,入力：収益性関連データ・利益データ / 出力：更新済み収益性指標・分析結果・精度レポート,収益性理論・利益率分析・収益力評価・精度管理・信頼性確保,収益性計算エラー・利益率エラー・更新失敗・精度不足のハンドリング,高速収益性計算・効率的な利益率処理・精度最適化
再計算・更新処理,recalculate_safety_indicators.py,安全性指標再計算,安全性指標の再計算・自己資本比率・負債比率・固定比率の更新・財務安全性分析精度向上機能,安全性分析 + 精度向上,AnalysisResult・StandardAccountBalance,1.安全性データ抽出→2.安全性比率計算→3.精度検証→4.指標更新→5.安全性分析→6.品質評価,入力：安全性関連データ・資本データ / 出力：更新済み安全性指標・分析結果・精度レポート,安全性理論・財務健全性分析・比率計算・精度管理・信頼性確保,安全性計算エラー・比率エラー・更新失敗・精度不足のハンドリング,高速安全性計算・効率的な比率処理・精度最適化
再計算・更新処理,recreate_all_balances.py,全残高データ再作成,全JA・全年度の標準勘定科目残高データ再作成・データ整合性回復・残高計算精度向上・全面的なデータリフレッシュ機能,残高データ管理 + 全面再構築,StandardAccountBalance・CSVData,1.全残高データ削除→2.マッピング確認→3.残高再計算→4.一括作成→5.整合性検証→6.品質確認,入力：全財務データ・再作成設定 / 出力：再作成済み残高・整合性レポート・品質評価,残高データ管理・整合性回復・精度向上・品質保証・データ信頼性,残高作成エラー・整合性失敗・計算エラー・品質劣化のハンドリング,効率的な全面再構築・並列残高作成・最適化された処理
再計算・更新処理,recreate_cf_balances.py,CF残高データ再作成,キャッシュフロー計算書残高データの再作成・CF残高精度向上・現金流入流出データの再構築・CF分析精度向上機能,CF残高管理 + 精度向上,StandardAccountBalance・CSVData,1.CF残高削除→2.CFマッピング確認→3.CF残高再計算→4.現金流動再構築→5.整合性検証→6.品質確認,入力：CFデータ・再作成設定 / 出力：再作成済みCF残高・整合性レポート・品質評価,CF残高管理・現金流動分析・精度向上・品質保証・データ信頼性,CF残高エラー・流動計算失敗・整合性問題・品質不足のハンドリング,効率的なCF再構築・高速残高作成・CF処理最適化
再計算・更新処理,recreate_deposit_balances.py,預金残高データ再作成,JA特有の預金残高データ再作成・預金科目の正確な残高反映・預り金としての預金管理・JA業務特性対応機能,預金残高管理 + JA特性対応,StandardAccountBalance・CSVData,1.預金残高削除→2.預金科目特定→3.預金残高再計算→4.預り金分類→5.JA特性反映→6.品質確認,入力：預金データ・JA設定 / 出力：再作成済み預金残高・分類結果・品質評価,JA預金業務・預り金管理・業界特性対応・正確な残高反映・規制対応,預金残高エラー・分類失敗・業務特性エラー・規制対応問題のハンドリング,効率的な預金処理・JA特性最適化・高速残高作成
データ修正・メンテナンス,delete_and_recalculate.py,削除・再計算処理,既存データ削除・再計算処理・データリセット機能・財務指標の再計算・分析結果の全面再計算処理機能,データリセット + 再計算,AnalysisResult・StandardAccountBalance,1.削除対象特定→2.既存データ削除→3.データリセット→4.再計算実行→5.結果検証→6.品質確認,入力：削除対象・再計算設定 / 出力：削除結果・再計算結果・品質レポート,データリセット・再計算・品質管理・整合性確保・システム更新,削除エラー・再計算エラー・リセット失敗・品質劣化のハンドリング,高速削除・効率的な再計算・最適化されたリセット処理
データ修正・メンテナンス,demo_data_setup.py,デモデータ設定,システム初期データ作成・デモンストレーション用データセットアップ・テスト用財務データ作成・初期環境構築機能,初期データ + デモ環境,全モデル,1.デモデータ定義→2.初期データ作成→3.テストデータ生成→4.環境セットアップ→5.整合性確認→6.デモ環境完成,入力：デモ設定・初期設定 / 出力：デモデータ・テスト環境・セットアップレポート,デモ環境構築・初期データ管理・テスト環境・品質保証・システム初期化,データ作成エラー・セットアップ失敗・環境構築エラー・整合性問題のハンドリング,高速データ作成・効率的な環境構築・最適化されたセットアップ
更新処理,update_all_safety_indicators.py,全安全性指標更新,全JA安全性指標の一括更新・自己資本比率・負債比率等の安全性指標全面更新・財務健全性評価の最新化機能,安全性指標 + 一括更新,AnalysisResult・StandardAccountBalance,1.全JA安全性データ抽出→2.指標一括計算→3.安全性評価→4.一括更新→5.品質検証→6.更新完了,入力：全JA安全性データ・更新設定 / 出力：更新済み安全性指標・評価結果・品質レポート,安全性分析・財務健全性評価・一括更新・品質保証・リスク管理,安全性計算エラー・更新失敗・評価エラー・品質問題のハンドリング,並列安全性計算・効率的な一括更新・安全性処理最適化
更新処理,update_analysis_records.py,分析レコード更新,財務分析結果レコードの更新・分析データの最新化・指標値更新・分析結果の整合性確保・データ品質管理機能,分析データ更新 + 品質管理,AnalysisResult,1.分析レコード抽出→2.最新データ取得→3.分析結果更新→4.整合性確認→5.品質検証→6.更新完了,入力：分析対象・更新設定 / 出力：更新済み分析レコード・整合性レポート・品質評価,分析データ管理・結果更新・整合性保証・品質向上・データ信頼性,更新エラー・整合性失敗・品質劣化・データ競合のハンドリング,効率的な分析更新・整合性処理最適化・品質管理強化
更新処理,update_analysis_table.py,分析テーブル更新,分析結果テーブル全体の更新・テーブル構造最適化・インデックス更新・分析結果の包括的更新機能,テーブル管理 + 構造最適化,AnalysisResult,1.テーブル構造確認→2.データ整合性チェック→3.構造最適化→4.一括更新→5.インデックス更新→6.最適化完了,入力：テーブル更新設定・最適化パラメータ / 出力：更新済みテーブル・最適化結果・性能レポート,テーブル管理・構造最適化・性能向上・データ整合性・効率化,テーブル更新エラー・構造最適化失敗・性能劣化・整合性問題のハンドリング,高速テーブル更新・効率的な構造最適化・性能最大化
更新処理,update_cf_categories.py,CF分類更新,キャッシュフロー計算書の分類更新・営業活動・投資活動・財務活動の分類精度向上・CF構造最適化機能,CF分類管理 + 精度向上,StandardAccount・StandardAccountBalance,1.CF分類確認→2.活動別分類更新→3.分類精度向上→4.構造最適化→5.整合性確認→6.更新完了,入力：CF分類データ・更新基準 / 出力：更新済みCF分類・精度向上結果・構造最適化レポート,CF分類理論・活動分類精度・構造最適化・分類管理・品質向上,分類更新エラー・精度低下・構造最適化失敗・整合性問題のハンドリング,効率的なCF分類更新・精度最適化・構造処理効率化
更新処理,update_flow_liabilities.py,流動負債更新,流動負債項目の更新・短期負債の分類精度向上・流動性分析精度向上・負債構造最適化機能,流動負債管理 + 分類精度向上,StandardAccountBalance,1.流動負債抽出→2.短期負債分類→3.分類精度向上→4.構造更新→5.整合性確認→6.更新完了,入力：流動負債データ・分類基準 / 出力：更新済み流動負債・分類結果・精度向上レポート,流動負債理論・短期負債管理・分類精度・構造最適化・品質向上,流動負債更新エラー・分類失敗・精度低下・構造問題のハンドリング,効率的な流動負債処理・分類最適化・構造更新効率化
更新処理,update_liquidity_indicators.py,流動性指標更新,流動性指標の個別更新・流動比率・当座比率・現金比率の精度向上・流動性分析の最新化機能,流動性指標 + 精度向上,AnalysisResult・StandardAccountBalance,1.流動性指標抽出→2.比率再計算→3.精度向上処理→4.指標更新→5.分析結果更新→6.品質確認,入力：流動性データ・更新設定 / 出力：更新済み流動性指標・精度向上結果・品質レポート,流動性分析・比率精度・指標管理・品質向上・信頼性確保,流動性更新エラー・比率計算失敗・精度低下・品質劣化のハンドリング,高速流動性更新・効率的な比率処理・精度最適化
更新処理,update_standard_accounts_with_parent.py,親科目付き標準勘定科目更新,標準勘定科目の親子関係更新・階層構造の最適化・勘定科目体系の整備・親科目関係の整合性確保機能,勘定科目階層 + 体系整備,StandardAccount,1.親子関係抽出→2.階層構造分析→3.体系整備→4.親科目関係更新→5.整合性確認→6.体系最適化完了,入力：親子関係データ・体系設定 / 出力：更新済み階層構造・体系整備結果・整合性レポート,勘定科目体系・階層構造管理・親子関係整備・体系最適化・整合性保証,階層更新エラー・親子関係不整合・体系問題・整合性失敗のハンドリング,効率的な階層更新・体系最適化・構造処理効率化
修正・メンテナンス,fix_account_parent_codes.py,勘定科目親コード修正,勘定科目階層構造修正・親コードの正確性確保・階層関係の整合性修正・勘定科目体系の修正処理機能,階層構造修正 + コード管理,StandardAccount,1.親コード確認→2.階層構造分析→3.正確性確保→4.整合性修正→5.体系修正→6.検証完了,入力：親コードデータ・修正設定 / 出力：修正結果・階層レポート・整合性確認,階層構造管理・親コード管理・整合性確保・体系修正・品質向上,階層エラー・親コードエラー・整合性不一致・修正失敗のハンドリング,高速階層修正・効率的なコード管理・構造最適化
修正・メンテナンス,fix_account_totals.py,勘定科目合計修正,勘定科目合計値の修正・計算式の正確性確保・合計値計算の整合性修正・階層合計の精度向上機能,合計計算修正 + 精度向上,StandardAccountBalance・AccountFormula,1.合計値確認→2.計算式検証→3.正確性確保→4.整合性修正→5.精度向上→6.検証完了,入力：合計データ・修正設定 / 出力：修正済み合計値・計算結果・精度レポート,合計計算・計算式管理・精度確保・整合性保証・品質向上,合計計算エラー・計算式不正確・整合性失敗・精度不足のハンドリング,高速合計修正・効率的な計算処理・精度最適化
修正・メンテナンス,fix_accounts_display.py,勘定科目表示修正,勘定科目の画面表示修正・表示順序の最適化・UI表示の改善・勘定科目一覧の表示品質向上機能,表示修正 + UI最適化,StandardAccount・StandardAccountBalance,1.表示問題特定→2.表示順序修正→3.UI最適化→4.表示品質向上→5.ユーザビリティ改善→6.修正完了,入力：表示データ・修正設定 / 出力：修正済み表示・UI改善結果・品質向上レポート,UI設計・表示最適化・ユーザビリティ向上・表示品質・操作性改善,表示エラー・UI不整合・表示品質劣化・操作性問題のハンドリング,高速表示修正・効率的なUI最適化・表示処理効率化