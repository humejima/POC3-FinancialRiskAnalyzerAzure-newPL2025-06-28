カテゴリ,ファイル名,主要機能,詳細説明,技術要素,関連モデル,処理フロー,入出力,ビジネスロジック,エラーハンドリング,パフォーマンス考慮
コアシステム・アプリケーション基盤,app.py,Flaskアプリケーション設定・データベース初期化,"Flask WebアプリケーションのメインエントリーポイントでSQLAlchemyデータベース接続・セッション管理・CORS設定・文字列正規化処理を実装。PostgreSQL接続プール設定・セッション暗号化・環境変数による設定管理・文字列正規化イベントリスナー設定・プロキシ設定対応を含む包括的なアプリケーション基盤構築","Flask 2.x + SQLAlchemy 2.x + PostgreSQL + ProxyFix + 文字列正規化ライブラリ",全モデル,"1.環境変数読み込み→2.Flask アプリ初期化→3.データベース接続設定→4.イベントリスナー登録→5.セッション設定→6.アプリケーション起動","入力：環境変数(DATABASE_URL,SESSION_SECRET) / 出力：初期化済みFlaskアプリケーションインスタンス","アプリケーション全体の設定管理・データベース接続管理・セッション管理・セキュリティ設定・文字列データの正規化処理","データベース接続エラー・環境変数未設定・セッション暗号化エラーのハンドリング・接続プール枯渇対策","接続プール最適化・セッション管理効率化・メモリ使用量最適化・プロキシ設定によるパフォーマンス向上"
コアシステム・アプリケーション基盤,main.py,アプリケーションエントリーポイント,"Gunicornサーバー起動時に実行されるメインファイル。app.pyからFlaskインスタンスをインポートしてWebサーバーを起動。本番環境でのWSGI サーバー連携・マルチプロセス対応・ワーカープロセス管理のためのエントリーポイント。開発環境と本番環境の起動方法統一","Gunicorn WSGI Server + Flask Application + Python import system",なし,"1.app.pyインポート→2.Flaskアプリケーション取得→3.Gunicorn ワーカープロセス起動","入力：Gunicorn起動コマンド / 出力：起動済みWebアプリケーション","本番環境でのWebアプリケーション起動・WSGIサーバーとの連携・プロセス管理","インポートエラー・アプリケーション初期化失敗・ポート競合エラーのハンドリング","最小限のオーバーヘッド・高速起動・メモリ効率・マルチプロセス対応"
コアシステム・アプリケーション基盤,models.py,データベースモデル定義,"全データベーステーブルのSQLAlchemyモデル定義。JA情報・CSV財務データ・標準勘定科目・マッピング・残高・分析結果・計算式テーブルを含む。外部キー制約・インデックス設定・バリデーション・カスタムメソッド・クエリ最適化・データ型定義・制約条件・リレーションシップ定義","SQLAlchemy ORM 2.x + PostgreSQL + データ型定義 + 制約管理 + インデックス最適化","JA・CSVData・StandardAccount・AccountMapping・StandardAccountBalance・AnalysisResult・AccountFormula","1.モデルクラス定義→2.テーブル構造定義→3.リレーションシップ設定→4.制約条件設定→5.インデックス作成","入力：Python クラス定義 / 出力：データベーステーブル構造・ORM オブジェクト","データベース設計・テーブル関係定義・データ整合性保証・ビジネスルール実装・CRUD操作最適化","外部キー制約違反・一意制約違反・データ型エラー・NULL制約エラーのハンドリング","インデックス最適化・クエリ性能向上・メモリ効率的なリレーションシップ・バッチ処理対応"
コアシステム・アプリケーション基盤,routes.py,Webルーティング・画面表示制御,"Flask Webルーティング定義。メインダッシュボード・勘定科目残高一覧・財務分析画面・JA比較分析・データ管理画面・CSVアップロード処理を含む全画面制御。リクエスト処理・レスポンス生成・テンプレート レンダリング・セッション管理・エラーページ表示・ファイルアップロード・データ検証","Flask Routing + Jinja2 Templates + Werkzeug + ファイルアップロード + セッション管理",JA・CSVData・StandardAccountBalance,"1.HTTP リクエスト受信→2.ルート判定→3.認証チェック→4.ビジネスロジック実行→5.テンプレート レンダリング→6.HTTP レスポンス返却","入力：HTTP リクエスト・フォームデータ・ファイルアップロード / 出力：HTML レスポンス・リダイレクト・JSON データ","画面表示制御・ユーザー操作処理・データ表示・フォーム処理・ファイルアップロード・セッション管理・ナビゲーション制御","404エラー・500エラー・ファイルアップロードエラー・セッションタイムアウト・認証エラーのハンドリング","テンプレート キャッシュ・静的ファイル最適化・レスポンス圧縮・セッション効率化"
財務分析・計算エンジン,financial_indicators.py,財務指標計算エンジン,"5カテゴリの財務指標計算エンジン。流動性指標（流動比率・当座比率・現金比率）・収益性指標（ROA・ROE・営業利益率）・安全性指標（自己資本比率・負債比率・固定比率）・効率性指標（総資産回転率・売掛金回転率・在庫回転率）・キャッシュフロー指標・前年度比較・リスクスコア算出・業界ベンチマーク比較・計算精度管理","Python数値計算 + 財務分析理論 + 統計処理 + リスク評価アルゴリズム + 前年比較ロジック",StandardAccountBalance・AnalysisResult,"1.残高データ取得→2.指標別計算実行→3.前年度データ取得→4.比較分析→5.リスクスコア算出→6.結果保存→7.分析レポート生成","入力：JA コード・年度・財務諸表データ / 出力：計算済み財務指標・リスクスコア・比較分析結果・分析レポート","財務理論に基づく指標計算・業界標準との比較・リスク評価・トレンド分析・異常値検出・計算精度保証","ゼロ除算エラー・データ不足・計算オーバーフロー・精度誤差・異常値処理のハンドリング","計算処理最適化・メモリ効率的な数値処理・並列計算・キャッシュ活用・バッチ計算対応"
財務分析・計算エンジン,risk_analyzer.py,リスクスコア算出・評価分析,"カテゴリ別リスクレベル評価・総合リスクスコア計算・業界ベンチマークとの比較・リスク要因特定・改善提案生成・レーダーチャート用データ作成・リスク傾向分析・早期警告システム・リスクマトリックス作成・ダッシュボード用リスクサマリー生成","統計分析 + リスク評価理論 + 機械学習アルゴリズム + データ視覚化 + 予測モデル",AnalysisResult・StandardAccountBalance,"1.財務指標データ取得→2.リスクスコア計算→3.カテゴリ別評価→4.総合リスク判定→5.ベンチマーク比較→6.改善提案生成→7.可視化データ作成","入力：財務指標データ・業界ベンチマーク / 出力：リスクスコア・評価レポート・改善提案・可視化データ","リスク評価モデル・統計的分析・異常検知・傾向分析・予測分析・意思決定支援・早期警告","データ不整合・計算エラー・モデル精度低下・異常値・外れ値処理のハンドリング","高速リスク計算・リアルタイム分析・メモリ効率的な統計処理・並列分析処理"
財務分析・計算エンジン,account_calculator.py,勘定科目合計値計算,"勘定科目の合計値計算エンジン。資産の部合計・負債の部合計・純資産の部合計計算・計算式定義管理・優先度付き計算順序制御・StandardAccountBalanceテーブル使用・階層構造対応・複雑な計算式処理・依存関係解決・循環参照チェック・計算結果検証","計算式エンジン + 勘定体系理論 + 階層構造処理 + 依存関係解決アルゴリズム",StandardAccountBalance・AccountFormula,"1.計算式定義読み込み→2.依存関係分析→3.計算順序決定→4.階層計算実行→5.合計値算出→6.結果検証→7.データ保存","入力：勘定科目残高データ・計算式定義 / 出力：計算済み合計値・階層構造データ・検証結果","勘定体系に基づく計算・階層構造処理・依存関係管理・計算精度保証・整合性チェック","計算式エラー・循環参照・依存関係エラー・計算精度エラー・データ不整合のハンドリング","効率的な階層計算・メモリ最適化・計算キャッシュ・依存関係最適化"
データ処理・インポート,data_processor.py,CSVデータ処理・インポート,"CSV財務データの読み込み・データ形式検証・欠損データ処理・データ型変換・エラーレポート生成・JA財務データのインポート処理・データ品質チェック・重複データ処理・エンコーディング検出・大容量ファイル対応・バッチ処理・進捗管理","Pandas + CSV処理 + データ検証 + エンコーディング処理 + 大容量ファイル処理",CSVData・JA,"1.CSV ファイル読み込み→2.エンコーディング検出→3.データ形式検証→4.データ変換→5.品質チェック→6.データベース保存→7.エラーレポート生成","入力：CSV ファイル・インポート設定 / 出力：インポート済みデータ・エラーレポート・処理統計","データ品質管理・形式標準化・重複除去・欠損値処理・データ変換・整合性チェック","ファイル読み込みエラー・エンコーディングエラー・データ形式エラー・メモリ不足のハンドリング","大容量ファイル対応・メモリ効率的な処理・並列処理・進捗表示・中断再開機能"
データ処理・インポート,create_account_balances.py,標準勘定科目残高データ作成,"指定JA・年度の標準勘定科目残高データ生成・財務諸表タイプ別処理（BS・PL・CF）・データ整合性チェック・残高データの自動作成・マッピング結果反映・計算式適用・前年度データ引継ぎ・データ補完・検証処理","データ生成ロジック + 財務諸表理論 + データ整合性チェック + 自動補完",StandardAccountBalance・CSVData・StandardAccount,"1.対象データ特定→2.マッピング情報取得→3.残高データ生成→4.計算式適用→5.整合性チェック→6.データ保存→7.検証レポート出力","入力：JA コード・年度・財務諸表タイプ / 出力：標準勘定科目残高データ・整合性レポート","財務諸表構造に基づくデータ生成・自動マッピング適用・データ補完・整合性保証","データ不整合・マッピング不備・計算エラー・重複データのハンドリング","効率的なデータ生成・バッチ処理・メモリ最適化・処理進捗管理"
AI・自動マッピング機能,ai_account_mapper.py,AI支援勘定科目自動マッピング,"Azure OpenAI API連携による勘定科目自動マッピング・完全一致マッピング・AI支援マッピング（信頼度スコア付き）・文字列類似度マッピング・バッチ処理対応・マッピング結果統計・文字列正規化処理・学習データ管理・精度向上・マッピング履歴管理","Azure OpenAI API + 自然言語処理 + 類似度計算アルゴリズム + 機械学習 + 文字列処理",CSVData・StandardAccount・AccountMapping,"1.未マッピング科目抽出→2.文字列正規化→3.完全一致チェック→4.AI マッピング実行→5.信頼度評価→6.結果保存→7.統計レポート生成","入力：未マッピング勘定科目・標準勘定科目マスタ / 出力：マッピング結果・信頼度スコア・処理統計","AI による自然言語理解・パターン認識・類似度計算・学習データ活用・マッピング精度向上","API接続エラー・認証エラー・レート制限・AI応答エラー・信頼度不足のハンドリング","API呼び出し最適化・バッチ処理・キャッシュ活用・並列処理・レート制限対応"
AI・自動マッピング機能,ai_mapping_rules.py,JA預金科目マッピングルール,"JA特有の勘定科目ルール定義・預金関連科目の負債科目マッピング・ルールベース自動判定・JAの業務特性に対応した特別ルール適用・業界特有の勘定処理・規則エンジン・例外処理・ルール優先度管理","ルールエンジン + JA業務知識 + パターンマッチング + 業界特化ロジック",StandardAccount・AccountMapping,"1.ルール定義読み込み→2.対象科目判定→3.ルール適用→4.優先度評価→5.マッピング決定→6.例外処理→7.結果記録","入力：勘定科目名・業界ルール定義 / 出力：ルールベースマッピング結果・適用ルール情報","JA業界特有のビジネスルール・規制対応・業務慣行反映・例外処理・ルール管理","ルール競合・例外ケース・ルール更新・適用エラーのハンドリング","高速ルール適用・メモリ効率的なルール管理・ルールキャッシュ"
AI・自動マッピング機能,batch_mapping.py,バッチ処理一括マッピング,"大量データの効率的処理・タイムアウト防止機能・処理進捗管理・エラーハンドリング・一度に複数勘定科目のマッピング実行・メモリ使用量制御・中断再開機能・処理統計・ログ管理・並列処理対応","バッチ処理 + パフォーマンス最適化 + 並列処理 + 進捗管理 + エラー回復",CSVData・AccountMapping・StandardAccount,"1.処理対象抽出→2.バッチサイズ決定→3.並列処理実行→4.進捗監視→5.エラー処理→6.結果集約→7.統計レポート","入力：大量未マッピングデータ・処理設定 / 出力：マッピング結果・処理統計・エラーログ","大量データ処理・効率化・リソース管理・品質保証・進捗管理・エラー回復","メモリ不足・タイムアウト・処理中断・データ競合・システム負荷のハンドリング","並列処理最適化・メモリ管理・負荷分散・処理効率化・リソース監視"
AI・自動マッピング機能,direct_sql_mapping.py,SQL直接マッピング処理,"高速データベース操作・一括更新処理・参照マッピング機能・SQLクエリによる直接データ操作・大量データの高速処理・トランザクション管理・参照整合性保証・ロック管理・パフォーマンス最適化","SQL最適化 + データベース操作 + トランザクション管理 + パフォーマンスチューニング",AccountMapping・CSVData,"1.SQL クエリ生成→2.トランザクション開始→3.一括処理実行→4.整合性チェック→5.コミット→6.結果検証→7.ログ記録","入力：マッピング条件・対象データ範囲 / 出力：更新結果・処理統計・整合性レポート","高速データ処理・参照整合性保証・トランザクション管理・ロック最適化・性能向上","SQL エラー・デッドロック・整合性制約違反・トランザクション競合のハンドリング","SQL最適化・インデックス活用・バッチサイズ最適化・並列実行・ロック最小化"
バックアップ・データ保護,backup_system.py,データバックアップ・リストア,"マッピングデータバックアップ・残高データバックアップ（BS・PL・CF別）・JSON形式での保存・既存データ確認機能・詳細復元レポート・データ整合性チェック・バックアップファイル管理・暗号化・圧縮・世代管理・自動バックアップ","JSON処理 + ファイル操作 + データ保護 + 暗号化 + 圧縮 + 世代管理",AccountMapping・StandardAccountBalance・CSVData,"1.バックアップ対象選択→2.データ抽出→3.JSON シリアライズ→4.圧縮・暗号化→5.ファイル保存→6.世代管理→7.検証・ログ記録","入力：バックアップ対象・設定情報 / 出力：バックアップファイル・検証レポート・管理情報","データ保護・世代管理・整合性保証・復元可能性確保・セキュリティ確保","ファイル書き込みエラー・ディスク容量不足・暗号化エラー・整合性エラーのハンドリング","効率的なデータ圧縮・高速バックアップ・最小ディスク使用量・並列バックアップ"
バックアップ・データ保護,backup_api.py,バックアップ機能API,"バックアップ作成API・バックアップ一覧取得API・データ復元API・2段階確認プロンプト・エラーハンドリング・RESTful API設計・セキュリティ確認機能・認証・承認・監査ログ・API使用制限","REST API + セキュリティ + 確認プロセス + 認証・承認 + 監査ログ",AccountMapping・StandardAccountBalance,"1.API リクエスト受信→2.認証・承認→3.2段階確認→4.バックアップ処理実行→5.結果検証→6.レスポンス生成→7.監査ログ記録","入力：API リクエスト・認証情報・確認情報 / 出力：API レスポンス・処理結果・監査ログ","セキュリティ確保・操作確認・権限管理・監査証跡・データ保護・誤操作防止","認証エラー・権限不足・確認不備・処理失敗・セキュリティ違反のハンドリング","API レスポンス最適化・セキュリティ処理効率化・監査ログ最適化"
API・エンドポイント,api_endpoints.py,REST APIエンドポイント定義,"リスクデータ取得API・勘定科目データ取得API・JA比較分析API・キャッシュクリアAPI・レスポンス形式統一・JSON形式データ提供・CORS対応・レート制限・API バージョニング・パフォーマンス監視・エラー統一・ドキュメント生成","REST API + JSON + CORS + レート制限 + パフォーマンス監視 + API設計",AnalysisResult・StandardAccountBalance・JA,"1.API リクエスト受信→2.パラメータ検証→3.ビジネスロジック実行→4.データ取得・加工→5.JSON レスポンス生成→6.CORS ヘッダ設定→7.レスポンス送信","入力：HTTP リクエスト・API パラメータ / 出力：JSON レスポンス・ステータスコード・ヘッダ情報","RESTful設計・データ提供・フォーマット統一・エラー処理・性能最適化・CORS対応","パラメータエラー・データ取得エラー・JSON シリアライズエラー・CORS エラーのハンドリング","高速レスポンス・効率的なデータ取得・JSON最適化・キャッシュ活用・並列処理"
API・エンドポイント,clear_cache_route.py,キャッシュクリア機能,"JAユーザー登録画面キャッシュクリア・ブラウザキャッシュバイパス・特殊ルート定義・キャッシュ無効化処理・パフォーマンス最適化・メモリ管理・キャッシュ戦略・一時データクリア・セッションクリア","キャッシュ管理 + ブラウザ制御 + メモリ管理 + パフォーマンス最適化",なし,"1.キャッシュクリア要求→2.対象キャッシュ特定→3.無効化処理実行→4.ブラウザ指示→5.メモリクリア→6.処理完了通知","入力：キャッシュクリア要求 / 出力：クリア完了通知・ブラウザ制御指示","キャッシュ戦略・メモリ管理・パフォーマンス最適化・データ整合性・ユーザー体験向上","キャッシュアクセスエラー・メモリ不足・ブラウザ制御エラーのハンドリング","効率的なキャッシュ管理・最小限のパフォーマンス影響・高速クリア処理"
勘定科目管理・追加,add_current_assets.py,流動資産科目追加,"流動資産親科目設定・子科目関係定義・表示順序設定・勘定科目階層構造の構築・標準勘定科目マスタへの追加処理・データ整合性確保・重複チェック・参照整合性・階層検証","勘定科目体系 + 階層構造管理 + データ整合性 + 参照制約管理",StandardAccount,"1.対象科目定義→2.階層関係設定→3.重複チェック→4.データ挿入→5.参照整合性確認→6.表示順序設定→7.検証・完了","入力：科目定義・階層情報・表示設定 / 出力：追加済み勘定科目・階層構造・検証結果","勘定科目体系管理・階層構造構築・データ整合性保証・標準化・体系化","重複エラー・階層エラー・参照整合性エラー・データ競合のハンドリング","効率的な階層構築・最小限のデータ操作・整合性チェック最適化"
勘定科目管理・追加,add_total_accounts.py,BS合計科目追加,"貸借対照表合計科目追加・階層構造定義・計算式設定・資産の部・負債の部・純資産の部合計科目の標準勘定科目マスタ追加・財務諸表構造反映・計算依存関係・検証機能","勘定科目体系 + 財務諸表構造 + 計算式管理 + 依存関係管理",StandardAccount・AccountFormula,"1.BS構造分析→2.合計科目定義→3.計算式設定→4.依存関係定義→5.データ追加→6.整合性検証→7.テスト計算","入力：BS構造定義・計算式・合計科目設定 / 出力：BS合計科目・計算式・検証結果","財務諸表理論・勘定体系・計算ロジック・構造設計・標準化","構造エラー・計算式エラー・依存関係エラー・整合性エラーのハンドリング","効率的な構造構築・計算式最適化・依存関係最適化"
データ確認・検証ツール,check_data.py,JA・年度データ状態確認,"指定JA・年度のデータ存在チェック・レコード数確認・データ品質検証・財務諸表タイプ別データ確認・データ完整性検証・異常値検出・欠損データ確認・整合性チェック・品質スコア算出","データ検証 + 品質管理 + 異常値検出 + 完整性チェック + 統計分析",CSVData・StandardAccountBalance・JA,"1.対象データ特定→2.存在チェック→3.品質検証→4.異常値検出→5.整合性確認→6.品質スコア算出→7.レポート生成","入力：JA コード・年度・検証設定 / 出力：データ状況レポート・品質スコア・異常値リスト","データ品質管理・完整性保証・異常検知・品質測定・データガバナンス","データアクセスエラー・品質チェックエラー・異常値処理エラーのハンドリング","高速データスキャン・効率的な品質チェック・並列検証・メモリ最適化"
データ確認・検証ツール,check_balance_data.py,残高データ状態確認,"財務諸表タイプ別残高確認・異常値検出・データ完整性チェック・標準勘定科目残高の状態検証・残高データの品質確認・ゼロ残高チェック・負値チェック・桁数チェック・範囲チェック","データ品質管理 + 異常値検出 + 数値検証 + 財務諸表理論",StandardAccountBalance,"1.残高データ抽出→2.財務諸表別分類→3.異常値検出→4.完整性チェック→5.品質評価→6.問題特定→7.レポート作成","入力：残高データ・検証基準 / 出力：品質レポート・異常値リスト・改善提案","財務データ品質管理・数値妥当性・異常検知・品質保証・データ信頼性","数値エラー・異常値・データ欠損・範囲外値のハンドリング","高速数値検証・効率的な異常値検出・並列品質チェック"
データ確認・検証ツール,check_profitability_data.py,収益性指標データ確認,"利益関連科目確認・計算要素検証・指標計算テスト・収益性指標計算に使用される重要科目の値確認・税引前当期利益・総資産・純資産データ検証・計算精度確認・ベンチマーク比較","収益性分析 + データ検証 + 計算精度管理 + 財務理論",StandardAccountBalance・AnalysisResult,"1.収益性科目抽出→2.必須データ確認→3.計算要素検証→4.計算テスト→5.精度確認→6.ベンチマーク比較→7.検証レポート","入力：収益性関連データ・計算設定 / 出力：検証結果・計算精度・問題点リスト","収益性分析理論・計算精度管理・データ妥当性・品質保証・分析信頼性","計算エラー・データ不足・精度不足・異常値のハンドリング","高速計算検証・効率的なデータ確認・精度最適化"
データ確認・検証ツール,check_safety_indicators_for_chart.py,レーダーチャート用安全性指標確認,"チャート表示データ検証・安全性指標値確認・表示形式チェック・レーダーチャート描画用データの整合性確認・視覚化データ準備・スケール調整・データ正規化・グラフ用データ変換","データ視覚化 + チャート準備 + データ変換 + 表示最適化",AnalysisResult・StandardAccountBalance,"1.指標データ取得→2.チャート用変換→3.スケール調整→4.データ正規化→5.表示検証→6.描画テスト→7.品質確認","入力：安全性指標データ・チャート設定 / 出力：チャート用データ・表示検証結果","データ視覚化・チャート設計・表示最適化・ユーザー体験・情報伝達","データ変換エラー・スケールエラー・表示エラー・描画エラーのハンドリング","高速データ変換・効率的な表示処理・描画最適化"
データ確認・検証ツール,check_ja_data.py,JAデータ・CSV状態確認,"JA登録状況確認・CSV取り込み状況確認・データ連携状態検証・JAマスタとCSVデータの整合性チェック・データベース内のJAデータ状況確認・関連性確認・同期状態確認","データ連携 + 整合性チェック + 同期確認 + マスタ管理",JA・CSVData,"1.JA マスタ確認→2.CSV データ確認→3.関連性チェック→4.整合性検証→5.同期状態確認→6.問題特定→7.状況レポート","入力：JA識別情報・確認設定 / 出力：データ状況・整合性レポート・問題リスト","マスタデータ管理・データ連携・整合性保証・同期管理・データガバナンス","データ不整合・同期エラー・関連性エラー・アクセスエラーのハンドリング","高速データ照合・効率的な整合性チェック・並列確認処理"