カテゴリ,ファイル名,主要機能,詳細説明,技術要素,関連モデル,処理フロー,入出力,ビジネスロジック,エラーハンドリング,パフォーマンス考慮
コアシステム・アプリケーション基盤,app.py,Flaskアプリケーション設定・データベース初期化,Flask WebアプリケーションのメインエントリーポイントでSQLAlchemyデータベース接続・セッション管理・CORS設定・文字列正規化処理を実装,Flask + SQLAlchemy + PostgreSQL,全モデル,1.環境変数読み込み→2.Flaskアプリ初期化→3.データベース接続設定→4.イベントリスナー登録→5.セッション設定→6.アプリケーション起動,入力：環境変数 / 出力：初期化済みFlaskアプリケーション,アプリケーション全体の設定管理・データベース接続管理・セッション管理・セキュリティ設定,データベース接続エラー・環境変数未設定・セッション暗号化エラーのハンドリング,接続プール最適化・セッション管理効率化・メモリ使用量最適化
コアシステム・アプリケーション基盤,main.py,アプリケーションエントリーポイント,Gunicornサーバー起動時に実行されるメインファイル・app.pyからFlaskインスタンスをインポートしてWebサーバーを起動,Gunicorn + Flask,なし,1.app.pyインポート→2.Flaskアプリケーション取得→3.Gunicornワーカープロセス起動,入力：Gunicorn起動コマンド / 出力：起動済みWebアプリケーション,本番環境でのWebアプリケーション起動・WSGIサーバーとの連携,インポートエラー・アプリケーション初期化失敗・ポート競合エラーのハンドリング,最小限のオーバーヘッド・高速起動・メモリ効率
コアシステム・アプリケーション基盤,models.py,データベースモデル定義,全データベーステーブルのSQLAlchemyモデル定義・JA情報・CSV財務データ・標準勘定科目・マッピング・残高・分析結果・計算式テーブルを含む,SQLAlchemy ORM + PostgreSQL,JA・CSVData・StandardAccount・AccountMapping・StandardAccountBalance・AnalysisResult・AccountFormula,1.モデルクラス定義→2.テーブル構造定義→3.リレーションシップ設定→4.制約条件設定→5.インデックス作成,入力：Pythonクラス定義 / 出力：データベーステーブル構造・ORMオブジェクト,データベース設計・テーブル関係定義・データ整合性保証・ビジネスルール実装,外部キー制約違反・一意制約違反・データ型エラー・NULL制約エラーのハンドリング,インデックス最適化・クエリ性能向上・メモリ効率的なリレーションシップ
コアシステム・アプリケーション基盤,routes.py,Webルーティング・画面表示制御,Flask Webルーティング定義・メインダッシュボード・勘定科目残高一覧・財務分析画面・JA比較分析・データ管理画面・CSVアップロード処理を含む全画面制御,Flask Routing + Jinja2 Templates,JA・CSVData・StandardAccountBalance,1.HTTPリクエスト受信→2.ルート判定→3.認証チェック→4.ビジネスロジック実行→5.テンプレートレンダリング→6.HTTPレスポンス返却,入力：HTTPリクエスト・フォームデータ / 出力：HTMLレスポンス・リダイレクト・JSONデータ,画面表示制御・ユーザー操作処理・データ表示・フォーム処理・ファイルアップロード,404エラー・500エラー・ファイルアップロードエラー・セッションタイムアウトのハンドリング,テンプレートキャッシュ・静的ファイル最適化・レスポンス圧縮
財務分析・計算エンジン,financial_indicators.py,財務指標計算エンジン,5カテゴリの財務指標計算エンジン・流動性指標・収益性指標・安全性指標・効率性指標・キャッシュフロー指標・前年度比較・リスクスコア算出機能,Python数値計算 + 財務分析理論,StandardAccountBalance・AnalysisResult,1.残高データ取得→2.指標別計算実行→3.前年度データ取得→4.比較分析→5.リスクスコア算出→6.結果保存,入力：JAコード・年度・財務諸表データ / 出力：計算済み財務指標・リスクスコア・比較分析結果,財務理論に基づく指標計算・業界標準との比較・リスク評価・トレンド分析,ゼロ除算エラー・データ不足・計算オーバーフロー・精度誤差のハンドリング,計算処理最適化・メモリ効率的な数値処理・並列計算・キャッシュ活用
財務分析・計算エンジン,risk_analyzer.py,リスクスコア算出・評価分析,カテゴリ別リスクレベル評価・総合リスクスコア計算・業界ベンチマークとの比較・リスク要因特定・改善提案生成・レーダーチャート用データ作成機能,統計分析 + リスク評価理論,AnalysisResult・StandardAccountBalance,1.財務指標データ取得→2.リスクスコア計算→3.カテゴリ別評価→4.総合リスク判定→5.ベンチマーク比較→6.改善提案生成,入力：財務指標データ・業界ベンチマーク / 出力：リスクスコア・評価レポート・改善提案,リスク評価モデル・統計的分析・異常検知・傾向分析・予測分析・意思決定支援,データ不整合・計算エラー・モデル精度低下・異常値処理のハンドリング,高速リスク計算・リアルタイム分析・メモリ効率的な統計処理
財務分析・計算エンジン,account_calculator.py,勘定科目合計値計算,勘定科目の合計値計算エンジン・資産の部合計・負債の部合計・純資産の部合計計算・計算式定義管理・優先度付き計算順序制御機能,計算式エンジン + 勘定体系理論,StandardAccountBalance・AccountFormula,1.計算式定義読み込み→2.依存関係分析→3.計算順序決定→4.階層計算実行→5.合計値算出→6.結果検証,入力：勘定科目残高データ・計算式定義 / 出力：計算済み合計値・階層構造データ,勘定体系に基づく計算・階層構造処理・依存関係管理・計算精度保証,計算式エラー・循環参照・依存関係エラー・計算精度エラーのハンドリング,効率的な階層計算・メモリ最適化・計算キャッシュ
データ処理・インポート,data_processor.py,CSVデータ処理・インポート,CSV財務データの読み込み・データ形式検証・欠損データ処理・データ型変換・エラーレポート生成・JA財務データのインポート処理・データ品質チェック機能,Pandas + CSV処理 + データ検証,CSVData・JA,1.CSVファイル読み込み→2.エンコーディング検出→3.データ形式検証→4.データ変換→5.品質チェック→6.データベース保存,入力：CSVファイル・インポート設定 / 出力：インポート済みデータ・エラーレポート,データ品質管理・形式標準化・重複除去・欠損値処理・データ変換・整合性チェック,ファイル読み込みエラー・エンコーディングエラー・データ形式エラーのハンドリング,大容量ファイル対応・メモリ効率的な処理・並列処理
データ処理・インポート,create_account_balances.py,標準勘定科目残高データ作成,指定JA・年度の標準勘定科目残高データ生成・財務諸表タイプ別処理・データ整合性チェック・残高データの自動作成機能,データ生成ロジック + 財務諸表理論,StandardAccountBalance・CSVData・StandardAccount,1.対象データ特定→2.マッピング情報取得→3.残高データ生成→4.計算式適用→5.整合性チェック→6.データ保存,入力：JAコード・年度・財務諸表タイプ / 出力：標準勘定科目残高データ・整合性レポート,財務諸表構造に基づくデータ生成・自動マッピング適用・データ補完・整合性保証,データ不整合・マッピング不備・計算エラー・重複データのハンドリング,効率的なデータ生成・バッチ処理・メモリ最適化
データ処理・インポート,import_all_standard_accounts.py,全標準勘定科目インポート,BS・PL・CF全ての標準勘定科目を一括インポート・勘定科目体系の完全構築・階層関係設定・表示順序管理機能,勘定科目管理 + 一括処理,StandardAccount,1.全科目定義読み込み→2.体系構造確認→3.階層関係設定→4.一括インポート実行→5.整合性検証→6.完了確認,入力：標準勘定科目定義・体系設定 / 出力：インポート済み勘定科目・体系構造,勘定科目体系の完全構築・階層管理・表示制御・体系統一,インポートエラー・体系不整合・階層エラー・重複エラーのハンドリング,高速一括インポート・効率的な体系構築・メモリ最適化
データ処理・インポート,import_bs_standard_accounts.py,BS標準勘定科目インポート,貸借対照表の標準勘定科目をインポート・資産・負債・純資産の勘定科目設定・BS構造の構築機能,BS構造管理 + インポート処理,StandardAccount,1.BS科目定義読み込み→2.資産負債純資産分類→3.階層構造設定→4.BSインポート実行→5.構造検証→6.完了確認,入力：BS勘定科目定義 / 出力：BS標準勘定科目・構造データ,貸借対照表構造の構築・資産負債純資産管理・財務諸表理論の実装,BS構造エラー・分類エラー・階層不整合のハンドリング,高速BSインポート・効率的な構造構築・分類最適化
データ処理・インポート,import_cf_accounts.py,CF勘定科目インポート,キャッシュフロー計算書の勘定科目をインポート・営業・投資・財務活動の分類・CF構造の構築機能,CF構造管理 + インポート処理,StandardAccount,1.CF科目定義読み込み→2.活動別分類→3.CF構造設定→4.CFインポート実行→5.構造検証→6.完了確認,入力：CF勘定科目定義 / 出力：CF標準勘定科目・活動分類データ,キャッシュフロー構造の構築・活動分類管理・CF理論の実装,CF構造エラー・活動分類エラー・構造不整合のハンドリング,高速CFインポート・効率的な活動分類・構造最適化
データ処理・インポート,import_cf_accounts_new.py,新CF勘定科目インポート,最新のキャッシュフロー勘定科目体系をインポート・改良されたCF構造・新基準対応・拡張CF分類機能,新CF体系 + 改良インポート,StandardAccount,1.新CF定義読み込み→2.新体系分析→3.改良構造設定→4.新CFインポート→5.新基準検証→6.完了確認,入力：新CF勘定科目定義 / 出力：新CF標準勘定科目・改良構造データ,新CF基準の実装・改良されたCF構造・拡張分類管理,新体系エラー・改良構造エラー・新基準不整合のハンドリング,最新CF対応・効率的な新体系構築・改良最適化
データ処理・インポート,import_cf_only.py,CF専用インポート,キャッシュフローデータのみを専用インポート・CF特化処理・高速CF取り込み・CF専用最適化機能,CF専用処理 + 最適化,StandardAccount・CSVData,1.CFデータ抽出→2.CF専用検証→3.最適化処理→4.CF専用インポート→5.CF検証→6.完了確認,入力：CFデータ / 出力：CF専用インポート結果・最適化レポート,CF特化ビジネスロジック・専用最適化・高速CF処理,CF専用エラー・最適化失敗・CF特化問題のハンドリング,CF専用最適化・高速CF処理・メモリ効率化
データ処理・インポート,import_cf_standard_accounts.py,CF標準勘定科目インポート,標準的なキャッシュフロー勘定科目をインポート・標準CF体系・基本CF構造・標準分類管理機能,標準CF体系 + インポート,StandardAccount,1.標準CF定義読み込み→2.標準体系確認→3.基本構造設定→4.標準CFインポート→5.標準検証→6.完了確認,入力：標準CF勘定科目定義 / 出力：標準CF勘定科目・基本構造データ,標準CF体系の実装・基本構造管理・標準分類制御,標準体系エラー・基本構造エラー・標準化問題のハンドリング,標準CF最適化・効率的な基本構築・標準化促進
データ処理・インポート,import_pl_cf_updated.py,更新PL・CFインポート,最新のPL・CFデータを更新インポート・改良されたPL・CF構造・最新基準対応・統合インポート機能,更新PL・CF + 統合処理,StandardAccount・CSVData,1.更新PL・CF読み込み→2.最新構造分析→3.統合設定→4.更新インポート→5.統合検証→6.完了確認,入力：更新PL・CFデータ / 出力：最新PL・CF勘定科目・統合構造データ,最新PL・CF基準の実装・統合管理・改良構造制御,更新エラー・統合失敗・最新基準不整合のハンドリング,最新基準対応・効率的な統合処理・更新最適化
データ処理・インポート,import_pl_only.py,PL専用インポート,損益計算書データのみを専用インポート・PL特化処理・高速PL取り込み・PL専用最適化機能,PL専用処理 + 最適化,StandardAccount・CSVData,1.PLデータ抽出→2.PL専用検証→3.最適化処理→4.PL専用インポート→5.PL検証→6.完了確認,入力：PLデータ / 出力：PL専用インポート結果・最適化レポート,PL特化ビジネスロジック・専用最適化・高速PL処理,PL専用エラー・最適化失敗・PL特化問題のハンドリング,PL専用最適化・高速PL処理・メモリ効率化
データ処理・インポート,import_standard_accounts.py,標準勘定科目インポート,標準勘定科目マスタの基本インポート・勘定科目体系の基礎構築・基本階層設定・標準化処理機能,標準勘定科目管理 + 基本インポート,StandardAccount,1.標準科目定義読み込み→2.基本体系確認→3.階層設定→4.標準インポート→5.体系検証→6.完了確認,入力：標準勘定科目定義 / 出力：標準勘定科目・基本体系データ,標準勘定科目体系の基礎構築・標準化管理・基本階層制御,標準化エラー・体系不整合・階層問題のハンドリング,標準化最適化・効率的な基本構築・体系統一
データ処理・インポート,import_standard_accounts_direct.py,直接標準勘定科目インポート,データベースに直接標準勘定科目をインポート・高速直接処理・SQL最適化・一括直接取り込み機能,直接インポート + SQL最適化,StandardAccount,1.直接インポート準備→2.SQL最適化→3.一括直接処理→4.高速インポート→5.直接検証→6.完了確認,入力：勘定科目データ / 出力：直接インポート結果・処理統計,高速直接処理・SQL最適化・一括処理制御・効率化,直接処理エラー・SQL失敗・一括処理問題のハンドリング,最高速インポート・SQL最適化・直接処理効率化
データ処理・インポート,insert_pl_accounts.py,PL勘定科目挿入,損益計算書勘定科目の個別挿入・PL科目の追加・収益費用科目管理・PL構造拡張機能,PL科目管理 + 個別挿入,StandardAccount,1.PL科目定義→2.収益費用分類→3.個別挿入処理→4.PL構造拡張→5.整合性確認→6.完了確認,入力：PL勘定科目定義 / 出力：挿入済みPL科目・構造拡張データ,PL科目の個別管理・収益費用分類・構造拡張制御,挿入エラー・分類失敗・構造拡張問題のハンドリング,効率的な個別挿入・PL構造最適化・分類精度向上
データ処理・インポート,simple_import_pl.py,簡易PLインポート,シンプルなPLデータインポート・基本PL取り込み・軽量処理・エラー最小化インポート機能,簡易インポート + 軽量処理,StandardAccount・CSVData,1.簡易PL読み込み→2.基本検証→3.軽量処理→4.簡易インポート→5.基本確認→6.完了,入力：PLデータ / 出力：簡易インポート結果・基本レポート,簡易PL処理・基本インポート制御・軽量化ロジック,基本エラー・簡易処理失敗・軽量化問題のハンドリング,最軽量処理・高速簡易インポート・メモリ最小化
AI・自動マッピング機能,ai_account_mapper.py,AI支援勘定科目自動マッピング,Azure OpenAI API連携による勘定科目自動マッピング・完全一致マッピング・AI支援マッピング・文字列類似度マッピング・バッチ処理対応・マッピング結果統計機能,Azure OpenAI API + 自然言語処理,CSVData・StandardAccount・AccountMapping,1.未マッピング科目抽出→2.文字列正規化→3.完全一致チェック→4.AIマッピング実行→5.信頼度評価→6.結果保存,入力：未マッピング勘定科目・標準勘定科目マスタ / 出力：マッピング結果・信頼度スコア・処理統計,AIによる自然言語理解・パターン認識・類似度計算・学習データ活用・マッピング精度向上,API接続エラー・認証エラー・レート制限・AI応答エラーのハンドリング,API呼び出し最適化・バッチ処理・キャッシュ活用・並列処理
AI・自動マッピング機能,ai_mapping_rules.py,JA預金科目マッピングルール,JA特有の勘定科目ルール定義・預金関連科目の負債科目マッピング・ルールベース自動判定・JAの業務特性に対応した特別ルール適用機能,ルールエンジン + JA業務知識,StandardAccount・AccountMapping,1.ルール定義読み込み→2.対象科目判定→3.ルール適用→4.優先度評価→5.マッピング決定→6.例外処理,入力：勘定科目名・業界ルール定義 / 出力：ルールベースマッピング結果・適用ルール情報,JA業界特有のビジネスルール・規制対応・業務慣行反映・例外処理・ルール管理,ルール競合・例外ケース・ルール更新・適用エラーのハンドリング,高速ルール適用・メモリ効率的なルール管理
AI・自動マッピング機能,batch_mapping.py,バッチ処理一括マッピング,大量データの効率的処理・タイムアウト防止機能・処理進捗管理・エラーハンドリング・一度に複数勘定科目のマッピング実行・メモリ使用量制御機能,バッチ処理 + パフォーマンス最適化,CSVData・AccountMapping・StandardAccount,1.処理対象抽出→2.バッチサイズ決定→3.並列処理実行→4.進捗監視→5.エラー処理→6.結果集約,入力：大量未マッピングデータ・処理設定 / 出力：マッピング結果・処理統計・エラーログ,大量データ処理・効率化・リソース管理・品質保証・進捗管理・エラー回復,メモリ不足・タイムアウト・処理中断・データ競合のハンドリング,並列処理最適化・メモリ管理・負荷分散・処理効率化
AI・自動マッピング機能,direct_sql_mapping.py,SQL直接マッピング処理,高速データベース操作・一括更新処理・参照マッピング機能・SQLクエリによる直接データ操作・大量データの高速処理・トランザクション管理機能,SQL最適化 + データベース操作,AccountMapping・CSVData,1.SQLクエリ生成→2.トランザクション開始→3.一括処理実行→4.整合性チェック→5.コミット→6.結果検証,入力：マッピング条件・対象データ範囲 / 出力：更新結果・処理統計・整合性レポート,高速データ処理・参照整合性保証・トランザクション管理・ロック最適化・性能向上,SQLエラー・デッドロック・整合性制約違反・トランザクション競合のハンドリング,SQL最適化・インデックス活用・バッチサイズ最適化
AI・自動マッピング機能,reference_mapping.py,参照マッピング機能,他JAのマッピング結果を参照してマッピングを行う機能・類似JA検索・マッピングパターン参照・学習データ活用・マッピング精度向上機能,参照システム + パターン学習,AccountMapping・CSVData,1.参照JA検索→2.類似科目抽出→3.マッピングパターン分析→4.参照マッピング実行→5.精度評価→6.結果適用,入力：未マッピング科目・参照JA情報 / 出力：参照マッピング結果・精度スコア,参照学習・パターン認識・マッピング精度向上・学習データ活用・知識共有,参照データ不足・パターン不一致・精度不足のハンドリング,高速参照検索・効率的なパターンマッチング・学習最適化
AI・自動マッピング機能,quick_mapping.py,クイックマッピング機能,高速マッピング処理・簡易マッピング・即座マッピング・基本的なマッピングルール適用・処理速度優先のマッピング機能,高速処理 + 簡易マッピング,AccountMapping・CSVData,1.対象科目抽出→2.基本ルール適用→3.高速マッピング実行→4.結果検証→5.データ保存→6.処理完了,入力：マッピング対象科目 / 出力：クイックマッピング結果・処理時間,高速処理・基本マッピング・効率重視・即座処理・簡易ルール適用,マッピングエラー・ルール不適用・処理失敗のハンドリング,最高速度処理・最小リソース使用・並列処理最適化
AI・自動マッピング機能,simple_exact_match.py,簡易完全一致マッピング,シンプルな完全一致マッピング機能・基本的な文字列完全一致・高速処理・軽量実装・エラー最小化マッピング機能,完全一致処理 + 軽量実装,AccountMapping・StandardAccount,1.対象科目取得→2.文字列正規化→3.完全一致検索→4.マッピング実行→5.結果保存→6.統計更新,入力：未マッピング科目・標準科目 / 出力：完全一致マッピング結果・一致統計,完全一致処理・文字列比較・高速マッピング・軽量処理・エラー最小化,一致なし・文字列エラー・マッピング失敗のハンドリング,最高速一致処理・メモリ効率・軽量実装
バックアップ・データ保護,backup_system.py,データバックアップ・リストア,マッピングデータバックアップ・残高データバックアップ・JSON形式での保存・既存データ確認機能・詳細復元レポート・データ整合性チェック・バックアップファイル管理機能,JSON処理 + ファイル操作 + データ保護,AccountMapping・StandardAccountBalance・CSVData,1.バックアップ対象選択→2.データ抽出→3.JSONシリアライズ→4.圧縮・暗号化→5.ファイル保存→6.世代管理,入力：バックアップ対象・設定情報 / 出力：バックアップファイル・検証レポート・管理情報,データ保護・世代管理・整合性保証・復元可能性確保・セキュリティ確保,ファイル書き込みエラー・ディスク容量不足・暗号化エラーのハンドリング,効率的なデータ圧縮・高速バックアップ・最小ディスク使用量
バックアップ・データ保護,backup_api.py,バックアップ機能API,バックアップ作成API・バックアップ一覧取得API・データ復元API・2段階確認プロンプト・エラーハンドリング・RESTful API設計・セキュリティ確認機能,REST API + セキュリティ + 確認プロセス,AccountMapping・StandardAccountBalance,1.APIリクエスト受信→2.認証・承認→3.2段階確認→4.バックアップ処理実行→5.結果検証→6.レスポンス生成,入力：APIリクエスト・認証情報 / 出力：APIレスポンス・処理結果・監査ログ,セキュリティ確保・操作確認・権限管理・監査証跡・データ保護・誤操作防止,認証エラー・権限不足・確認不備・処理失敗のハンドリング,APIレスポンス最適化・セキュリティ処理効率化
API・エンドポイント,api_endpoints.py,REST APIエンドポイント定義,リスクデータ取得API・勘定科目データ取得API・JA比較分析API・キャッシュクリアAPI・レスポンス形式統一・JSON形式データ提供・CORS対応機能,REST API + JSON + CORS,AnalysisResult・StandardAccountBalance・JA,1.APIリクエスト受信→2.パラメータ検証→3.ビジネスロジック実行→4.データ取得・加工→5.JSONレスポンス生成→6.CORSヘッダ設定,入力：HTTPリクエスト・APIパラメータ / 出力：JSONレスポンス・ステータスコード,RESTful設計・データ提供・フォーマット統一・エラー処理・性能最適化・CORS対応,パラメータエラー・データ取得エラー・JSONシリアライズエラーのハンドリング,高速レスポンス・効率的なデータ取得・JSON最適化
API・エンドポイント,clear_cache_route.py,キャッシュクリア機能,JAユーザー登録画面キャッシュクリア・ブラウザキャッシュバイパス・特殊ルート定義・キャッシュ無効化処理・パフォーマンス最適化・メモリ管理機能,キャッシュ管理 + ブラウザ制御,なし,1.キャッシュクリア要求→2.対象キャッシュ特定→3.無効化処理実行→4.ブラウザ指示→5.メモリクリア→6.処理完了通知,入力：キャッシュクリア要求 / 出力：クリア完了通知・ブラウザ制御指示,キャッシュ戦略・メモリ管理・パフォーマンス最適化・データ整合性・ユーザー体験向上,キャッシュアクセスエラー・メモリ不足・ブラウザ制御エラーのハンドリング,効率的なキャッシュ管理・最小限のパフォーマンス影響
勘定科目管理・追加,add_current_assets.py,流動資産科目追加,流動資産親科目設定・子科目関係定義・表示順序設定・勘定科目階層構造の構築・標準勘定科目マスタへの追加処理機能,勘定科目体系 + 階層構造管理,StandardAccount,1.対象科目定義→2.階層関係設定→3.重複チェック→4.データ挿入→5.参照整合性確認→6.表示順序設定,入力：科目定義・階層情報・表示設定 / 出力：追加済み勘定科目・階層構造・検証結果,勘定科目体系管理・階層構造構築・データ整合性保証・標準化・体系化,重複エラー・階層エラー・参照整合性エラー・データ競合のハンドリング,効率的な階層構築・最小限のデータ操作・整合性チェック最適化
勘定科目管理・追加,add_total_accounts.py,BS合計科目追加,貸借対照表合計科目追加・階層構造定義・計算式設定・資産の部・負債の部・純資産の部合計科目の標準勘定科目マスタ追加機能,勘定科目体系 + 財務諸表構造,StandardAccount・AccountFormula,1.BS構造分析→2.合計科目定義→3.計算式設定→4.依存関係定義→5.データ追加→6.整合性検証,入力：BS構造定義・計算式・合計科目設定 / 出力：BS合計科目・計算式・検証結果,財務諸表理論・勘定体系・計算ロジック・構造設計・標準化,構造エラー・計算式エラー・依存関係エラー・整合性エラーのハンドリング,効率的な構造構築・計算式最適化・依存関係最適化
勘定科目管理・追加,ja_management.py,JA管理機能,JA（農業協同組合）の登録・編集・削除機能・JA基本情報管理・組織情報管理・連絡先情報管理・管理画面提供機能,JA管理システム + データ管理,JA,1.JA情報入力→2.データ検証→3.重複チェック→4.データベース保存→5.確認画面表示→6.管理一覧更新,入力：JA基本情報・組織情報・連絡先 / 出力：登録確認・管理一覧・検証結果,JA組織管理・基本情報管理・データ整合性保証・重複防止・情報更新管理,重複登録エラー・必須項目未入力・データ形式エラーのハンドリング,効率的なJA情報管理・検索最適化・一覧表示最適化
ルーティング・画面制御,route_extensions.py,ルート拡張機能,追加ルーティング機能・特殊画面制御・カスタムエンドポイント・画面遷移制御・ユーザーインターフェース拡張機能,Flask拡張ルーティング + UI制御,複数モデル,1.拡張ルート定義→2.カスタム処理実装→3.画面制御ロジック→4.データ処理→5.レスポンス生成→6.画面遷移,入力：カスタムリクエスト・特殊パラメータ / 出力：拡張画面・カスタムレスポンス,カスタム業務ロジック・特殊画面制御・ユーザー体験向上・機能拡張,カスタムエラー・特殊ケース・画面制御エラーのハンドリング,カスタム処理最適化・画面レンダリング最適化
ルーティング・画面制御,standard_accounts_route.py,標準勘定科目ルート,標準勘定科目管理画面のルーティング・勘定科目一覧表示・検索機能・フィルタ機能・ソート機能・勘定科目詳細表示機能,勘定科目管理 + 画面制御,StandardAccount,1.勘定科目要求受信→2.検索・フィルタ処理→3.ソート処理→4.ページネーション→5.画面レンダリング→6.レスポンス返却,入力：検索条件・フィルタ・ソート設定 / 出力：勘定科目一覧・詳細情報・検索結果,勘定科目管理・検索機能・データ表示・ユーザーインターフェース・操作性向上,検索エラー・データ取得エラー・表示エラーのハンドリング,高速検索・効率的なデータ表示・ページネーション最適化
最適化・パフォーマンス,performance_enhancer.py,パフォーマンス向上機能,システム全体のパフォーマンス監視・処理速度最適化・メモリ使用量管理・レスポンス時間改善・ボトルネック特定・最適化提案機能,パフォーマンス監視 + 最適化,全モデル,1.パフォーマンス監視→2.ボトルネック特定→3.最適化実行→4.効果測定→5.改善提案→6.継続監視,入力：システム稼働データ・監視設定 / 出力：パフォーマンスレポート・最適化結果・改善提案,パフォーマンス管理・最適化戦略・リソース管理・効率化・品質向上,パフォーマンス劣化・リソース不足・最適化失敗のハンドリング,高速パフォーマンス分析・効率的な最適化・リアルタイム監視
最適化・パフォーマンス,optimize_account_balances.py,勘定科目残高最適化,勘定科目残高データの最適化・データ構造改善・クエリ性能向上・インデックス最適化・残高計算効率化機能,データ最適化 + クエリ性能向上,StandardAccountBalance,1.残高データ分析→2.最適化計画→3.構造改善→4.インデックス最適化→5.性能測定→6.効果確認,入力：残高データ・最適化設定 / 出力：最適化結果・性能改善レポート・効率化データ,残高データ最適化・クエリ性能向上・データ構造改善・効率化,最適化失敗・性能劣化・データ構造エラーのハンドリング,高速残高処理・効率的なデータ構造・クエリ最適化
ユーティリティ,utils.py,共通ユーティリティ,システム全体で使用される共通関数・データ変換・文字列処理・日付処理・計算補助・エラーハンドリング補助機能,共通関数ライブラリ + ユーティリティ,なし,1.関数呼び出し→2.パラメータ検証→3.処理実行→4.結果変換→5.エラーチェック→6.結果返却,入力：各種データ・処理パラメータ / 出力：変換済みデータ・処理結果,共通処理・データ変換・文字列操作・日付計算・エラー制御,共通エラー・変換エラー・パラメータエラー・処理失敗のハンドリング,高速共通処理・効率的なユーティリティ・メモリ最適化
データ確認・検証ツール,check_accounts_display_order.py,勘定科目表示順序確認,勘定科目の表示順序確認・画面表示制御・ソート順序検証・ユーザーインターフェース表示順序の適切性確認機能,UI/UX + 表示制御,StandardAccount・StandardAccountBalance,1.表示順序取得→2.ソート順検証→3.UI表示確認→4.順序適切性チェック→5.問題特定→6.改善提案,入力：表示設定・ソート条件 / 出力：表示順序検証結果・UI改善提案,ユーザーインターフェース設計・表示順序管理・ユーザビリティ向上・操作性最適化,表示エラー・ソート失敗・UI不整合のハンドリング,高速表示処理・効率的なソート・UIレンダリング最適化
データ確認・検証ツール,check_analysis_results.py,分析結果確認,財務指標計算結果検証・分析結果データの整合性確認・計算精度検証・指標値の妥当性チェック・リスクスコア検証機能,計算結果検証 + 精度管理,AnalysisResult,1.分析結果取得→2.計算精度検証→3.妥当性チェック→4.整合性確認→5.異常値検出→6.品質評価,入力：分析結果データ・検証基準 / 出力：検証結果・精度レポート・品質評価,分析精度管理・計算結果検証・品質保証・信頼性確保・妥当性確認,計算エラー・精度不足・異常値・整合性エラーのハンドリング,高速結果検証・効率的な精度チェック・並列検証処理
データ確認・検証ツール,check_and_fix_ja004.py,JA004安全性指標確認・修正,特定JA（JA004）の安全性指標データ確認・修正処理・個別JA対応・データ修正機能・特定ケース対応処理機能,個別対応 + データ修正,AnalysisResult・StandardAccountBalance,1.JA004データ抽出→2.安全性指標確認→3.問題特定→4.修正処理実行→5.結果検証→6.レポート生成,入力：JA004識別情報・修正設定 / 出力：修正結果・検証レポート・改善状況,個別JA対応・特定問題解決・データ品質向上・カスタム修正・品質管理,データ不整合・修正失敗・特定エラー・検証失敗のハンドリング,効率的な個別処理・最適化された修正処理・高速検証
データ確認・検証ツール,check_api_endpoints.py,APIエンドポイント確認,API動作確認・エンドポイント応答テスト・API機能検証・レスポンス確認・APIの健全性チェック機能,APIテスト + 動作確認,なし,1.APIエンドポイント特定→2.テストリクエスト送信→3.レスポンス検証→4.機能確認→5.性能測定→6.健全性評価,入力：APIエンドポイント・テスト設定 / 出力：APIテスト結果・性能データ・健全性レポート,API品質管理・機能検証・性能監視・可用性確認・信頼性保証,APIエラー・接続失敗・レスポンス異常・タイムアウトのハンドリング,高速APIテスト・効率的な検証・並列テスト実行
データ確認・検証ツール,check_available_data.py,利用可能データ確認,データ可用性チェック・システム内データの利用可能状況確認・データ存在確認・アクセス可能性検証機能,データ可用性 + アクセス制御,全モデル,1.データソース確認→2.可用性チェック→3.アクセス権限確認→4.データ整合性検証→5.利用状況評価→6.可用性レポート,入力：データ識別情報・アクセス設定 / 出力：可用性レポート・アクセス状況・利用統計,データガバナンス・可用性管理・アクセス制御・データ品質・利用最適化,アクセス拒否・データ不在・権限エラー・整合性エラーのハンドリング,高速可用性チェック・効率的なアクセス確認・並列データ確認
データ確認・検証ツール,check_balance_data.py,残高データ状態確認,財務諸表タイプ別残高確認・異常値検出・データ完整性チェック・標準勘定科目残高の状態検証・残高データの品質確認機能,データ品質管理 + 異常値検出,StandardAccountBalance,1.残高データ抽出→2.財務諸表別分類→3.異常値検出→4.完整性チェック→5.品質評価→6.問題特定,入力：残高データ・検証基準 / 出力：品質レポート・異常値リスト・改善提案,財務データ品質管理・数値妥当性・異常検知・品質保証・データ信頼性,数値エラー・異常値・データ欠損・範囲外値のハンドリング,高速数値検証・効率的な異常値検出・並列品質チェック
データ確認・検証ツール,check_balances.py,勘定科目残高確認,勘定科目残高値チェック・残高データの妥当性確認・数値検証・残高計算の正確性確認機能,残高検証 + 数値妥当性,StandardAccountBalance,1.残高データ抽出→2.数値妥当性チェック→3.計算精度検証→4.異常値検出→5.整合性確認→6.精度評価,入力：残高データ・検証基準 / 出力：残高検証結果・精度レポート・異常値リスト,数値精度管理・残高妥当性・計算精度・データ品質・信頼性確保,数値エラー・計算エラー・精度不足・異常値のハンドリング,高速数値検証・効率的な残高チェック・並列計算検証
データ確認・検証ツール,check_bs_data.py,BSデータ確認,貸借対照表データ確認・BS財務諸表データの整合性チェック・資産・負債・純資産データ検証・流動資産関連勘定科目確認機能,貸借対照表検証 + 財務諸表理論,StandardAccountBalance・CSVData,1.BSデータ抽出→2.構造検証→3.バランスチェック→4.科目検証→5.整合性確認→6.品質評価,入力：BSデータ・検証基準 / 出力：BS検証結果・構造レポート・品質評価,貸借対照表理論・財務諸表構造・バランス検証・勘定体系・整合性保証,構造エラー・バランス不一致・科目エラー・整合性エラーのハンドリング,高速BS検証・効率的な構造チェック・並列バランス確認
データ確認・検証ツール,check_cf_account_display.py,CF勘定科目表示確認,キャッシュフロー計算書の勘定科目表示確認・CF表示制御・営業活動・投資活動・財務活動キャッシュフロー表示検証機能,キャッシュフロー表示 + UI制御,StandardAccountBalance,1.CF勘定科目抽出→2.表示形式確認→3.分類検証→4.表示順序チェック→5.UI検証→6.表示品質評価,入力：CF表示データ・表示設定 / 出力：CF表示検証結果・UI改善提案,キャッシュフロー表示・UI設計・表示分類・順序管理・ユーザビリティ,表示エラー・分類エラー・UI不整合・順序エラーのハンドリング,高速表示検証・効率的なUI確認・表示最適化
データ確認・検証ツール,check_cf_accounts.py,CF勘定科目確認,キャッシュフロー計算書科目チェック・CF関連勘定科目の存在確認・キャッシュフロー構成要素検証機能,キャッシュフロー理論 + 科目検証,StandardAccount・StandardAccountBalance,1.CF科目抽出→2.構成要素確認→3.分類検証→4.完整性チェック→5.整合性確認→6.品質評価,入力：CF科目データ・検証基準 / 出力：CF科目検証結果・構成要素レポート,キャッシュフロー理論・科目構成・分類管理・完整性保証・品質管理,科目不足・分類エラー・構成エラー・整合性エラーのハンドリング,高速科目検証・効率的な構成確認・並列品質チェック
データ確認・検証ツール,check_cf_balances.py,CF残高確認,キャッシュフロー計算書残高値確認・CF残高データの妥当性チェック・現金流入流出データ検証機能,キャッシュフロー検証 + 数値妥当性,StandardAccountBalance,1.CF残高データ抽出→2.流入流出検証→3.数値妥当性チェック→4.計算精度確認→5.異常値検出→6.品質評価,入力：CF残高データ・検証基準 / 出力：CF残高検証結果・数値品質レポート,キャッシュフロー計算・数値精度・流入流出管理・計算妥当性・品質保証,数値エラー・計算エラー・流入流出エラー・精度不足のハンドリング,高速CF検証・効率的な数値確認・並列計算チェック
データ確認・検証ツール,check_cf_data.py,CFデータ確認,キャッシュフロー計算書データ全般確認・CF財務諸表データ整合性チェック・キャッシュフロー計算の正確性検証機能,キャッシュフロー理論 + データ整合性,StandardAccountBalance・CSVData,1.CFデータ抽出→2.構造検証→3.計算検証→4.整合性チェック→5.品質評価→6.総合判定,入力：CFデータ・検証基準 / 出力：CF総合検証結果・品質レポート・改善提案,キャッシュフロー理論・計算精度・構造整合性・品質管理・データガバナンス,構造エラー・計算エラー・整合性エラー・品質不足のハンドリング,高速CF検証・効率的な総合確認・並列品質評価
データ確認・検証ツール,check_cf_data_updated.py,CF更新データ確認,キャッシュフロー更新状況確認・CFデータの更新履歴チェック・最新データ反映状況検証機能,データ更新管理 + 履歴追跡,StandardAccountBalance,1.CF更新データ抽出→2.更新履歴確認→3.最新状況検証→4.反映状況チェック→5.更新品質評価→6.履歴レポート,入力：CF更新データ・履歴設定 / 出力：更新状況レポート・履歴分析・品質評価,データ更新管理・履歴追跡・バージョン管理・品質管理・変更追跡,更新エラー・履歴不整合・反映失敗・品質劣化のハンドリング,高速更新確認・効率的な履歴管理・変更追跡最適化
データ確認・検証ツール,check_cf_values.py,CF値確認,キャッシュフロー計算値確認・CF指標値の妥当性チェック・計算結果検証・数値精度確認機能,計算精度 + 数値検証,StandardAccountBalance・AnalysisResult,1.CF計算値抽出→2.妥当性チェック→3.精度検証→4.指標確認→5.異常値検出→6.品質評価,入力：CF計算値・検証基準 / 出力：CF値検証結果・精度レポート・品質評価,計算精度管理・数値妥当性・指標検証・品質保証・信頼性確保,計算エラー・精度不足・異常値・妥当性エラーのハンドリング,高速値検証・効率的な精度確認・並列計算チェック
データ確認・検証ツール,check_correct_code.py,正確なコード確認,勘定科目コード整合性確認・コード体系の正確性チェック・標準コードとの照合・コード統一性検証機能,コード管理 + 整合性チェック,StandardAccount・CSVData,1.コードデータ抽出→2.体系整合性確認→3.標準コード照合→4.統一性検証→5.異常コード検出→6.品質評価,入力：勘定科目コード・標準コード / 出力：コード検証結果・整合性レポート・統一性評価,コード管理・体系統一・標準化・整合性保証・品質管理,コード不一致・体系エラー・統一性エラー・標準化エラーのハンドリング,高速コード照合・効率的な体系確認・並列整合性チェック
データ確認・検証ツール,check_csv_data_category.py,CSVデータカテゴリ確認,CSVデータ分類確認・財務諸表タイプ別データ分類検証・インポートデータのカテゴライズ確認機能,データ分類 + カテゴリ管理,CSVData,1.CSVデータ抽出→2.分類検証→3.カテゴリ確認→4.タイプ別検証→5.分類品質評価→6.カテゴリレポート,入力：CSVデータ・分類基準 / 出力：分類検証結果・カテゴリレポート・品質評価,データ分類・カテゴリ管理・タイプ別管理・分類精度・品質保証,分類エラー・カテゴリ不一致・タイプエラー・品質劣化のハンドリング,高速分類確認・効率的なカテゴリ管理・分類最適化
データ確認・検証ツール,check_data.py,JA・年度データ状態確認,指定JA・年度のデータ存在チェック・レコード数確認・データ品質検証・財務諸表タイプ別データ確認・データ完整性検証機能,データ検証 + 品質管理,CSVData・StandardAccountBalance・JA,1.対象データ特定→2.存在チェック→3.品質検証→4.異常値検出→5.整合性確認→6.品質スコア算出,入力：JAコード・年度・検証設定 / 出力：データ状況レポート・品質スコア・異常値リスト,データ品質管理・完整性保証・異常検知・品質測定・データガバナンス,データアクセスエラー・品質チェックエラー・異常値処理エラーのハンドリング,高速データスキャン・効率的な品質チェック・並列検証
データ確認・検証ツール,check_db.py,データベース確認,データベース状態チェック・DB接続確認・テーブル存在確認・データベース健全性検証・システム全体のDB状況確認機能,データベース管理 + システム監視,全モデル,1.DB接続確認→2.テーブル存在確認→3.構造検証→4.健全性チェック→5.性能確認→6.総合評価,入力：DB接続情報・確認設定 / 出力：DB状況レポート・健全性評価・性能データ,データベース管理・システム監視・健全性保証・性能監視・可用性確認,接続エラー・構造エラー・性能劣化・可用性問題のハンドリング,高速DB確認・効率的な監視・システム最適化
データ確認・検証ツール,check_debt_ratio.py,負債比率確認,負債比率安全性指標確認・負債比率計算の正確性検証・安全性指標の妥当性チェック・リスク評価データ確認機能,安全性分析 + リスク評価,StandardAccountBalance・AnalysisResult,1.負債比率データ抽出→2.計算精度検証→3.安全性評価→4.リスク分析→5.妥当性確認→6.評価レポート,入力：負債比率データ・評価基準 / 出力：負債比率検証結果・安全性評価・リスク分析,安全性分析・リスク評価・財務健全性・比率分析・信頼性保証,計算エラー・評価エラー・リスク分析エラー・妥当性エラーのハンドリング,高速比率計算・効率的な安全性分析・リスク評価最適化
データ確認・検証ツール,check_efficiency_indicators.py,効率性指標確認,効率性指標評価確認・総資産回転率等の効率性指標計算検証・効率性リスクスコア確認・指標値妥当性チェック機能,効率性分析 + 指標検証,AnalysisResult・StandardAccountBalance,1.効率性指標抽出→2.計算検証→3.妥当性確認→4.リスク評価→5.効率性分析→6.評価レポート,入力：効率性指標データ・評価基準 / 出力：効率性検証結果・分析レポート・改善提案,効率性分析・指標計算・妥当性確認・リスク評価・経営効率評価,計算エラー・指標エラー・評価エラー・妥当性不足のハンドリング,高速効率性計算・効率的な指標分析・評価最適化
データ確認・検証ツール,check_indicators_json.py,指標JSON構造確認,財務指標計算結果のJSON構造確認・データ形式検証・APIレスポンス構造チェック・JSONデータの整合性確認機能,JSON構造 + データ形式,AnalysisResult,1.JSONデータ抽出→2.構造検証→3.形式確認→4.整合性チェック→5.API互換性確認→6.品質評価,入力：JSONデータ・構造定義 / 出力：JSON検証結果・構造レポート・互換性評価,JSON構造管理・データ形式統一・API設計・整合性保証・互換性確保,JSONエラー・構造不一致・形式エラー・互換性問題のハンドリング,高速JSON検証・効率的な構造確認・形式最適化
データ確認・検証ツール,check_ja004_efficiency.py,JA004効率性指標確認,特定JA（JA004）の効率性指標確認・個別JA効率性データ検証・特定ケース対応・効率性計算結果確認機能,個別JA分析 + 効率性評価,AnalysisResult・StandardAccountBalance,1.JA004データ抽出→2.効率性指標確認→3.計算検証→4.個別分析→5.問題特定→6.改善提案,入力：JA004識別情報・効率性設定 / 出力：JA004効率性レポート・分析結果・改善提案,個別JA分析・効率性評価・カスタム分析・問題解決・改善支援,効率性エラー・計算失敗・分析エラー・個別問題のハンドリング,効率的な個別分析・最適化された効率性計算・高速評価
データ確認・検証ツール,check_ja_data.py,JAデータ・CSV状態確認,JA登録状況確認・CSV取り込み状況確認・データ連携状態検証・JAマスタとCSVデータの整合性チェック・データベース内のJAデータ状況確認機能,データ連携 + 整合性チェック,JA・CSVData,1.JAマスタ確認→2.CSVデータ確認→3.関連性チェック→4.整合性検証→5.同期状態確認→6.問題特定,入力：JA識別情報・確認設定 / 出力：データ状況・整合性レポート・問題リスト,マスタデータ管理・データ連携・整合性保証・同期管理・データガバナンス,データ不整合・同期エラー・関連性エラー・アクセスエラーのハンドリング,高速データ照合・効率的な整合性チェック・並列確認処理
データ確認・検証ツール,check_liquidity_balances.py,流動性指標残高確認,流動性指標関連残高データ確認・流動資産・流動負債データ検証・流動性分析用データの正確性確認・流動比率計算要素チェック機能,流動性分析 + 残高検証,StandardAccountBalance,1.流動性関連残高抽出→2.流動資産確認→3.流動負債確認→4.比率計算検証→5.データ精度確認→6.流動性評価,入力：流動性残高データ・分析設定 / 出力：流動性検証結果・残高レポート・精度評価,流動性分析・残高管理・比率計算・精度保証・流動性評価,残高エラー・計算エラー・流動性分析エラー・精度不足のハンドリング,高速流動性分析・効率的な残高確認・比率計算最適化
データ確認・検証ツール,check_mappings.py,マッピング状況確認,勘定科目マッピング状況調査・参照マッピング機能問題調査・マッピング精度確認・未マッピング科目特定・マッピング品質管理機能,マッピング品質 + 精度管理,AccountMapping・CSVData・StandardAccount,1.マッピング状況抽出→2.精度確認→3.未マッピング特定→4.品質評価→5.問題分析→6.改善提案,入力：マッピングデータ・品質基準 / 出力：マッピング状況レポート・精度評価・改善提案,マッピング品質管理・精度向上・問題解決・品質保証・継続改善,マッピングエラー・精度不足・品質劣化・未マッピング問題のハンドリング,高速マッピング確認・効率的な品質管理・精度最適化
データ確認・検証ツール,check_net_income.py,当期利益確認,収益性指標計算要素確認・当期純利益・税引前当期利益データ検証・収益性計算に使用される利益科目の値確認・総資産・純資産データ確認機能,収益性計算 + 利益データ,StandardAccountBalance,1.利益科目抽出→2.当期利益確認→3.税引前利益確認→4.計算要素検証→5.収益性データ確認→6.精度評価,入力：利益データ・収益性設定 / 出力：利益確認結果・収益性データレポート・精度評価,収益性分析・利益管理・計算要素確認・精度保証・データ品質,利益データエラー・計算要素不足・精度不足・収益性エラーのハンドリング,高速利益確認・効率的な収益性分析・計算最適化
データ確認・検証ツール,check_parent_child_structure.py,親子関係構造確認,勘定科目階層構造診断・親子関係の整合性確認・勘定科目合計の問題診断・階層構造の正確性検証機能,階層構造管理 + 関係性検証,StandardAccount・AccountFormula,1.階層構造抽出→2.親子関係確認→3.整合性検証→4.合計計算確認→5.構造診断→6.改善提案,入力：階層構造データ・関係性設定 / 出力：構造検証結果・関係性レポート・改善提案,階層構造管理・関係性保証・構造設計・整合性確保・品質管理,構造エラー・関係性エラー・整合性不一致・階層問題のハンドリング,高速構造確認・効率的な関係性検証・階層最適化
データ確認・検証ツール,check_pl.py,PLデータ確認,損益計算書データ確認・PL財務諸表データ整合性チェック・収益・費用データ検証・損益計算の正確性確認機能,損益計算書理論 + データ検証,StandardAccountBalance・CSVData,1.PLデータ抽出→2.損益構造確認→3.収益費用検証→4.計算精度確認→5.整合性チェック→6.品質評価,入力：PLデータ・検証基準 / 出力：PL検証結果・損益レポート・品質評価,損益計算書理論・収益費用管理・計算精度・構造整合性・品質保証,損益エラー・計算エラー・構造不一致・品質不足のハンドリング,高速PL検証・効率的な損益確認・計算最適化
データ確認・検証ツール,check_pl_balances.py,PL残高確認,損益計算書残高値確認・PL残高データの妥当性チェック・収益・費用残高検証・損益データの正確性確認機能,損益残高 + 数値妥当性,StandardAccountBalance,1.PL残高抽出→2.収益残高確認→3.費用残高確認→4.妥当性チェック→5.精度検証→6.品質評価,入力：PL残高データ・妥当性基準 / 出力：PL残高検証結果・妥当性レポート・品質評価,損益残高管理・数値妥当性・精度保証・品質管理・信頼性確保,残高エラー・妥当性エラー・精度不足・品質劣化のハンドリング,高速残高確認・効率的な妥当性チェック・精度最適化
データ確認・検証ツール,check_pl_data.py,PLデータ詳細確認,損益計算書データ全般チェック・PL財務諸表詳細検証・収益性分析用データ確認・当期純利益関連データ検証機能,損益計算書分析 + 詳細検証,StandardAccountBalance・CSVData,1.PL詳細データ抽出→2.全般構造確認→3.詳細検証→4.分析データ確認→5.品質評価→6.総合判定,入力：PL詳細データ・検証基準 / 出力：PL詳細検証結果・総合レポート・品質評価,損益詳細分析・構造検証・データ品質・総合評価・信頼性保証,詳細エラー・構造問題・品質不足・総合評価エラーのハンドリング,高速詳細確認・効率的な総合検証・分析最適化
データ確認・検証ツール,check_pl_mappings.py,PLマッピング確認,損益計算書科目マッピング確認・PL勘定科目のマッピング状況検証・収益・費用科目マッピング精度確認機能,PLマッピング + 精度管理,AccountMapping・StandardAccount,1.PLマッピング抽出→2.科目マッピング確認→3.精度検証→4.収益費用分類確認→5.品質評価→6.改善提案,入力：PLマッピングデータ・精度基準 / 出力：PLマッピング検証結果・精度レポート・改善提案,PLマッピング管理・精度向上・分類精度・品質保証・継続改善,マッピングエラー・精度不足・分類エラー・品質劣化のハンドリング,高速マッピング確認・効率的な精度管理・分類最適化
データ確認・検証ツール,check_pl_mappings_correct.py,PL正確マッピング確認,損益計算書マッピング精度チェック・PL科目マッピングの正確性検証・マッピング品質向上・精度向上確認機能,マッピング精度 + 品質向上,AccountMapping・StandardAccount,1.正確マッピング抽出→2.精度チェック→3.正確性検証→4.品質確認→5.向上度評価→6.改善計画,入力：正確マッピングデータ・品質基準 / 出力：精度検証結果・品質向上レポート・改善計画,マッピング精度管理・品質向上・正確性保証・継続改善・精度最適化,精度エラー・品質劣化・正確性不足・改善失敗のハンドリング,高速精度確認・効率的な品質向上・精度最適化
データ確認・検証ツール,check_pl_net_income.py,PL当期純利益確認,損益計算書当期純利益科目確認・利益科目データ検証・収益性指標計算用利益データ確認・当期純利益関連科目チェック機能,利益科目 + 収益性計算,StandardAccountBalance,1.当期純利益抽出→2.利益科目確認→3.収益性データ確認→4.関連科目チェック→5.計算要素検証→6.精度評価,入力：当期純利益データ・利益設定 / 出力：純利益確認結果・利益科目レポート・精度評価,利益管理・純利益計算・収益性分析・計算精度・データ品質,利益エラー・計算エラー・収益性エラー・精度不足のハンドリング,高速利益確認・効率的な純利益計算・収益性最適化
データ確認・検証ツール,check_pl_parents.py,PL親勘定科目確認,損益計算書階層構造確認・PL親勘定科目コード検証・損益計算書の勘定科目階層関係確認・親子関係整合性チェック機能,PL階層構造 + 親子関係,StandardAccount,1.PL親科目抽出→2.階層構造確認→3.親子関係検証→4.コード整合性確認→5.構造品質評価→6.改善提案,入力：PL親科目データ・階層設定 / 出力：PL階層検証結果・親子関係レポート・構造改善提案,PL階層管理・親子関係保証・構造設計・整合性確保・品質管理,階層エラー・親子関係エラー・構造不整合・整合性問題のハンドリング,高速階層確認・効率的な親子関係検証・構造最適化
データ確認・検証ツール,check_profitability_data.py,収益性指標データ確認,利益関連科目確認・計算要素検証・指標計算テスト・収益性指標計算に使用される重要科目の値確認・税引前当期利益・総資産・純資産データ検証機能,収益性分析 + データ検証,StandardAccountBalance・AnalysisResult,1.収益性科目抽出→2.必須データ確認→3.計算要素検証→4.計算テスト→5.精度確認→6.ベンチマーク比較,入力：収益性関連データ・計算設定 / 出力：検証結果・計算精度・問題点リスト,収益性分析理論・計算精度管理・データ妥当性・品質保証・分析信頼性,計算エラー・データ不足・精度不足・異常値のハンドリング,高速計算検証・効率的なデータ確認・精度最適化
データ確認・検証ツール,check_risk_scores.py,リスクスコア確認,リスク評価値確認・カテゴリ別リスクスコア検証・総合リスク評価確認・リスク分析結果の妥当性チェック・リスクレベル判定確認機能,リスク評価 + スコア検証,AnalysisResult,1.リスクスコア抽出→2.カテゴリ別確認→3.総合評価検証→4.妥当性チェック→5.レベル判定確認→6.リスク分析,入力：リスクスコアデータ・評価基準 / 出力：リスク検証結果・評価レポート・改善提案,リスク評価・スコア管理・総合判定・妥当性確認・リスク分析,リスク評価エラー・スコア不整合・判定エラー・妥当性不足のハンドリング,高速リスク確認・効率的な評価検証・リスク分析最適化
データ確認・検証ツール,check_safety_accounts_ui.py,安全性指標UI確認,安全性指標UI表示検証・画面表示データと実際のデータベース内容比較・安全性指標表示部分で使用される科目コードと値確認機能,UI検証 + 表示データ,StandardAccountBalance・AnalysisResult,1.UI表示データ抽出→2.データベース内容確認→3.表示データ比較→4.科目コード確認→5.値整合性検証→6.UI品質評価,入力：UI表示データ・DB内容 / 出力：UI検証結果・表示品質レポート・整合性評価,UI表示管理・データ整合性・表示品質・ユーザー体験・信頼性確保,表示エラー・データ不整合・UI品質劣化・整合性問題のハンドリング,高速UI確認・効率的な表示検証・UI最適化
データ確認・検証ツール,check_safety_data.py,安全性データ確認,安全性指標データ状態確認・自己資本比率・負債比率等安全性指標データ検証・安全性分析用データの正確性確認機能,安全性分析 + データ状態,StandardAccountBalance・AnalysisResult,1.安全性データ抽出→2.指標データ確認→3.比率計算検証→4.分析データ確認→5.正確性検証→6.品質評価,入力：安全性データ・分析設定 / 出力：安全性検証結果・データ品質レポート・分析評価,安全性分析・指標管理・比率計算・データ品質・分析精度,安全性エラー・指標エラー・比率計算エラー・品質不足のハンドリング,高速安全性確認・効率的な指標検証・分析最適化
データ確認・検証ツール,check_safety_indicator_data.py,安全性指標データ詳細,安全性指標計算要素詳細確認・安全性指標計算に使用される各科目値の詳細検証・計算精度確認機能,安全性計算 + 詳細検証,StandardAccountBalance・AnalysisResult,1.安全性計算要素抽出→2.詳細科目確認→3.計算精度検証→4.要素整合性確認→5.詳細品質評価→6.精度改善提案,入力：安全性計算要素・詳細設定 / 出力：詳細検証結果・計算精度レポート・改善提案,安全性詳細分析・計算精度管理・要素検証・品質保証・精度向上,計算要素エラー・精度不足・詳細エラー・品質劣化のハンドリング,高速詳細確認・効率的な精度検証・計算最適化
データ確認・検証ツール,check_safety_indicators_for_chart.py,レーダーチャート用安全性指標確認,チャート表示データ検証・安全性指標値確認・表示形式チェック・レーダーチャート描画用データの整合性確認・視覚化データ準備機能,データ視覚化 + チャート準備,AnalysisResult・StandardAccountBalance,1.指標データ取得→2.チャート用変換→3.スケール調整→4.データ正規化→5.表示検証→6.描画テスト,入力：安全性指標データ・チャート設定 / 出力：チャート用データ・表示検証結果,データ視覚化・チャート設計・表示最適化・ユーザー体験・情報伝達,データ変換エラー・スケールエラー・表示エラー・描画エラーのハンドリング,高速データ変換・効率的な表示処理・描画最適化
データ確認・検証ツール,check_standard_accounts.py,標準勘定科目確認,標準勘定科目マスタ確認・標準科目データの整合性チェック・勘定科目体系の正確性検証・標準勘定科目の完整性確認機能,標準勘定科目 + 体系管理,StandardAccount,1.標準科目抽出→2.マスタ整合性確認→3.体系正確性検証→4.完整性チェック→5.品質評価→6.改善提案,入力：標準勘定科目データ・体系設定 / 出力：標準科目検証結果・体系品質レポート・改善提案,標準勘定科目管理・体系設計・整合性保証・完整性確保・品質管理,標準科目エラー・体系不整合・完整性不足・品質劣化のハンドリング,高速標準確認・効率的な体系検証・管理最適化
データ確認・検証ツール,check_total_accounts.py,合計勘定科目確認,合計勘定科目データ確認・BS・PL・CF合計科目の存在確認・合計値計算の正確性検証・財務諸表合計項目チェック機能,合計科目 + 計算検証,StandardAccount・AccountFormula,1.合計科目抽出→2.存在確認→3.計算正確性検証→4.財務諸表合計確認→5.品質評価→6.計算改善提案,入力：合計科目データ・計算設定 / 出力：合計科目検証結果・計算品質レポート・改善提案,合計科目管理・計算精度・財務諸表構造・品質保証・計算最適化,合計エラー・計算不正確・構造不整合・品質不足のハンドリング,高速合計確認・効率的な計算検証・構造最適化