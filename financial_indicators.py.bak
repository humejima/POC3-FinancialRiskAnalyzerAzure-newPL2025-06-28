import json
import logging
from app import db
from models import StandardAccountBalance, AnalysisResult

logger = logging.getLogger(__name__)

class FinancialIndicators:
    """
    Calculate financial indicators based on standard account balances
    """
    
    @staticmethod
    def calculate_all_indicators(ja_code, year):
        """
        Calculate all financial indicators for a JA and year
        
        Args:
            ja_code: JA code
            year: Financial year
            
        Returns:
            dict: Results of indicator calculations by category
        """
        try:
            results = {}
            
            # Calculate liquidity indicators
            results['liquidity'] = FinancialIndicators.calculate_liquidity_indicators(ja_code, year)
            
            # Calculate profitability indicators
            results['profitability'] = FinancialIndicators.calculate_profitability_indicators(ja_code, year)
            
            # Calculate safety indicators
            results['safety'] = FinancialIndicators.calculate_safety_indicators(ja_code, year)
            
            # Calculate efficiency indicators
            results['efficiency'] = FinancialIndicators.calculate_efficiency_indicators(ja_code, year)
            
            # Calculate cash flow indicators
            results['cash_flow'] = FinancialIndicators.calculate_cash_flow_indicators(ja_code, year)
            
            return results
            
        except Exception as e:
            logger.error(f"Error calculating financial indicators: {str(e)}")
            return {
                'status': 'error',
                'message': f"Error calculating indicators: {str(e)}"
            }
    
    @staticmethod
    def get_account_value(ja_code, year, statement_type, account_code):
        """
        Helper method to get the current value of a specific account
        親勘定科目（例：流動資産）の値がゼロの場合、子勘定科目（例：現金・預金）の合計を計算
        
        Args:
            ja_code: JA code
            year: Financial year
            statement_type: Type of financial statement (bs, pl, cf)
            account_code: Standard account code
            
        Returns:
            tuple: (float: Account value or 0 if not found, str: Account name or None)
        """
        # Debug
        logger.debug(f"経常利益(6900)と経常費用(7900)の値を取得しています: JA={ja_code}, year={year}, account_code={account_code}")
        try:
            # 親子関係のみを参照する
            # JAごとに勘定科目コードは異なる可能性がある
            # 基本的に直接の勘定科目コードを使用し、親勘定科目の場合のみ子勘定科目を参照する
            
            from models import StandardAccount
            
            # まず直接の勘定科目を取得
            account = StandardAccountBalance.query.filter_by(
                ja_code=ja_code,
                year=year,
                statement_type=statement_type,
                standard_account_code=account_code
            ).first()
            
            if account and account.current_value != 0:
                # 通常のケース：勘定科目が存在し、値が0でない
                logger.debug(f"勘定科目 {account_code} ({account.standard_account_name}) の値: {account.current_value}")
                return account.current_value, account.standard_account_name
            else:
                # 勘定科目が存在しないか、値が0の場合は、データベースから親子関係を取得
                # 標準勘定科目テーブルから親科目コードとして設定されている科目を検索
                child_accounts = []
                
                # 現在の科目が他の科目の親科目であるか確認
                standard_accounts = StandardAccount.query.filter_by(parent_code=account_code).all()
                
                if standard_accounts:
                    # 親科目コードに該当する子科目コードのリストを作成
                    child_codes = [sa.code for sa in standard_accounts]
                    logger.debug(f"親勘定科目 {account_code} の子勘定科目: {child_codes}")
                    
                    # 子勘定科目の残高を検索
                    child_accounts = StandardAccountBalance.query.filter(
                        StandardAccountBalance.ja_code == ja_code,
                        StandardAccountBalance.year == year,
                        StandardAccountBalance.statement_type == statement_type,
                        StandardAccountBalance.standard_account_code.in_(child_codes)
                    ).all()
                    
                    # 子勘定科目の合計を計算
                    total_value = sum(acc.current_value for acc in child_accounts if acc.current_value is not None)
                    
                    # 合計がゼロでない場合は合計を返す
                    if total_value != 0:
                        account_name = account.standard_account_name if account else f"{account_code}の子勘定科目合計"
                        logger.debug(f"子勘定科目合計: {total_value} ({len(child_accounts)} 勘定科目)")
                        return total_value, account_name
                
                # 親子関係が見つからない場合は、デフォルトの親子関係定義を使用（互換性のため）
                # 子勘定科目が存在する可能性がある親勘定科目のリスト
                parent_codes = {
                    # BSの親勘定科目
                    "1": ["1010", "1020", "1100", "1200", "1300", "1400", "1500"],  # 現金預け金
                    "1600": ["1610", "1620", "1630", "1640", "1650", "1660"],  # 有価証券
                    "1700": ["1710", "1720", "1730", "1740"],  # 貸出金
                    "1800": ["1810", "1820", "1830", "1840"],  # 外国為替
                    "1900": ["1910", "1920", "1930", "1940", "1950", "1960", "1970", "1980", "1990", "1995"],  # その他資産
                    "2000": ["2010", "2020", "2030", "2040", "2050"],  # 有形固定資産
                    "2100": ["2110", "2120", "2130", "2140"],  # 無形固定資産
                    "3000": ["3010", "3020", "3030", "3040", "3050", "3060", "3070"],  # 預金
                    "3600": ["3610", "3620"],  # 借用金
                    "3700": ["3710", "3720", "3730", "3740"],  # 外国為替
                    "3900": ["3910", "3920", "3930", "3940", "3950", "3960", "3970", "3980", "3990"],  # その他負債
                    "4700": ["4710", "4720", "4730"],  # 貸倒引当金
                    "5100": ["5110", "5120"],  # 資本剰余金
                    "5200": ["5210", "5220"],  # 利益剰余金
                    "6900": ["6910", "6920", "6930", "6940", "6950", "6960", "6970", "6980"],  # 経常収益
                    "6100": ["6110", "6120"],  # 役務取引等収益
                    "6200": ["6210", "6220", "6230", "6240", "6250", "6260"],  # その他業務収益
                    "6300": ["6310", "6320", "6330", "6340", "6350"],  # その他経常収益
                    "7900": ["7910", "7920", "7930", "7940", "7950", "7960", "7970", "7980", "7990", "7995"],  # 経常費用
                    "7100": ["7110", "7120"],  # 役務取引等費用
                    "7200": ["7210", "7220", "7230", "7240", "7250", "7260", "7270"],  # その他業務費用
                    "7300": ["7310", "7320", "7330"],  # 営業経費
                    "7400": ["7410", "7420", "7430", "7440", "7450", "7460"],  # その他経常費用
                    "8000": ["8010", "8020", "8030"],  # 特別利益
                    "8100": ["8110", "8120", "8130"],  # 特別損失
                }
                
                # 現在の勘定科目が親勘定かどうかチェック
                if account_code in parent_codes:
                    logger.debug(f"親勘定科目 {account_code} の子勘定科目から合計を計算（デフォルト定義使用）")
                    
                    # 子勘定科目の合計を計算
                    child_accounts = StandardAccountBalance.query.filter(
                        StandardAccountBalance.ja_code == ja_code,
                        StandardAccountBalance.year == year,
                        StandardAccountBalance.statement_type == statement_type,
                        StandardAccountBalance.standard_account_code.in_(parent_codes[account_code])
                    ).all()
                    
                    # 子勘定科目の合計を計算
                    total_value = sum(acc.current_value for acc in child_accounts if acc.current_value is not None)
                    
                    # 合計がゼロでない場合は合計を返す
                    if total_value != 0:
                        account_name = account.standard_account_name if account else f"{account_code}の子勘定科目合計"
                        logger.debug(f"子勘定科目合計（デフォルト定義）: {total_value} ({len(child_accounts)} 勘定科目)")
                        return total_value, account_name
                
                # 勘定科目が見つからないか、子勘定もゼロの場合
                if account:
                    logger.debug(f"勘定科目 {account_code} ({account.standard_account_name}) の値はゼロです")
                    return 0, account.standard_account_name
                else:
                    logger.debug(f"勘定科目 {account_code} が見つかりません")
                    return 0, None
            
        except Exception as e:
            logger.error(f"勘定科目の値取得エラー: {str(e)}")
            return 0, None
    
    @staticmethod
    def calculate_liquidity_indicators(ja_code, year):
        """
        Calculate liquidity indicators
        
        Args:
            ja_code: JA code
            year: Financial year
            
        Returns:
            dict: Liquidity indicators with calculation details
        """
        try:
            # 流動資産の定義：1（現金預け金）+ 1600（有価証券）+ 1700（貸出金）+ 1800（外国為替）+ 1900（その他資産）
            # 各科目の値を取得
            cash_deposits, cash_deposits_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1")  # 現金預け金
            securities, securities_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1600")  # 有価証券
            loans, loans_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1700")  # 貸出金
            foreign_exchange, foreign_exchange_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1800")  # 外国為替
            other_assets, other_assets_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1900")  # その他資産
            
            # 流動資産の合計を計算
            current_assets = cash_deposits + securities + loans + foreign_exchange + other_assets
            current_assets_name = "流動資産（合計）"
            
            # 流動負債を取得（預金：コード3000）
            current_liabilities, current_liabilities_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "3000")  # 預金（流動負債）
            
            # その他の勘定科目を取得
            cash_and_equivalents, cash_equivalents_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1010")  # 現金
            short_term_investments, investments_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1020")  # 預け金
            accounts_receivable, receivables_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1110")  # コールローン
            
            # 流動資産および流動負債の詳細をログに出力
            logger.debug(f"現金預け金: {cash_deposits} ({cash_deposits_name})")
            logger.debug(f"有価証券: {securities} ({securities_name})")
            logger.debug(f"貸出金: {loans} ({loans_name})")
            logger.debug(f"外国為替: {foreign_exchange} ({foreign_exchange_name})")
            logger.debug(f"その他資産: {other_assets} ({other_assets_name})")
            logger.debug(f"流動資産合計: {current_assets} ({current_assets_name})")
            logger.debug(f"流動負債: {current_liabilities} ({current_liabilities_name})")
            
            # ログを出力して確認
            logger.debug(f"current_assetsの最終値: {current_assets}")
            
            # Calculate indicators
            indicators = {}
            
            # Current Ratio
            if current_liabilities != 0:
                value = current_assets / current_liabilities
                indicators['current_ratio'] = {
                    'value': value,
                    'formula': '流動資産 ÷ 流動負債',
                    'calculation': f'{current_assets:,.0f} ÷ {current_liabilities:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '現金預け金': {'code': '1', 'name': cash_deposits_name or '現金預け金', 'value': cash_deposits},
                        '有価証券': {'code': '1600', 'name': securities_name or '有価証券', 'value': securities},
                        '貸出金': {'code': '1700', 'name': loans_name or '貸出金', 'value': loans},
                        '外国為替': {'code': '1800', 'name': foreign_exchange_name or '外国為替', 'value': foreign_exchange},
                        'その他資産': {'code': '1900', 'name': other_assets_name or 'その他資産', 'value': other_assets},
                        '流動資産合計': {'code': '1', 'name': current_assets_name, 'value': current_assets},
                        '流動負債': {'code': '3000', 'name': current_liabilities_name or '流動負債', 'value': current_liabilities}
                    }
                }
            else:
                indicators['current_ratio'] = {
                    'value': None,
                    'formula': '流動資産 ÷ 流動負債',
                    'calculation': '流動負債がゼロのため計算できません',
                    'accounts_used': {
                        '流動資産': {'code': '1', 'name': current_assets_name or '流動資産', 'value': current_assets},
                        '流動負債': {'code': '3000', 'name': current_liabilities_name or '流動負債', 'value': current_liabilities}
                    }
                }
            
            # Quick Ratio (当座比率)
            if current_liabilities != 0:
                # JAの財務では、当座比率は現金・預け金全体を使用するのが一般的
                quick_assets = cash_deposits  # 現金預け金（1）を使用
                value = quick_assets / current_liabilities
                indicators['quick_ratio'] = {
                    'value': value,
                    'formula': '現金預け金 ÷ 流動負債',
                    'calculation': f'{cash_deposits:,.0f} ÷ {current_liabilities:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '現金': {'code': '1010', 'name': cash_equivalents_name or '現金', 'value': cash_and_equivalents},
                        '預け金': {'code': '1020', 'name': investments_name or '預け金', 'value': short_term_investments},
                        'コールローン': {'code': '1110', 'name': receivables_name or 'コールローン', 'value': accounts_receivable},
                        '現金預け金合計': {'code': '1', 'name': cash_deposits_name or '現金預け金', 'value': cash_deposits},
                        '流動負債': {'code': '3000', 'name': current_liabilities_name or '流動負債', 'value': current_liabilities}
                    }
                }
            else:
                indicators['quick_ratio'] = {
                    'value': None,
                    'formula': '(現金及び現金同等物 + 短期投資 + 売掛金) ÷ 流動負債',
                    'calculation': '流動負債がゼロのため計算できません',
                    'accounts_used': {
                        '現金及び現金同等物': {'code': '1110', 'name': cash_equivalents_name or '現金及び現金同等物', 'value': cash_and_equivalents},
                        '短期投資': {'code': '1120', 'name': investments_name or '短期投資', 'value': short_term_investments},
                        '売掛金': {'code': '1130', 'name': receivables_name or '売掛金', 'value': accounts_receivable},
                        '流動負債': {'code': '3000', 'name': current_liabilities_name or '流動負債', 'value': current_liabilities}
                    }
                }
            
            # Cash Ratio （現金比率）
            if current_liabilities != 0:
                # JAの財務では、現金比率も現金預け金全体を使用するのが適切
                value = cash_deposits / current_liabilities  # 現金預け金（1）を使用
                indicators['cash_ratio'] = {
                    'value': value,
                    'formula': '現金預け金 ÷ 流動負債',
                    'calculation': f'{cash_deposits:,.0f} ÷ {current_liabilities:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '現金': {'code': '1010', 'name': cash_equivalents_name or '現金', 'value': cash_and_equivalents},
                        '預け金': {'code': '1020', 'name': investments_name or '預け金', 'value': short_term_investments},
                        '現金預け金合計': {'code': '1', 'name': cash_deposits_name or '現金預け金', 'value': cash_deposits},
                        '流動負債': {'code': '3000', 'name': current_liabilities_name or '流動負債', 'value': current_liabilities}
                    }
                }
            else:
                indicators['cash_ratio'] = {
                    'value': None,
                    'formula': '現金預け金 ÷ 流動負債',
                    'calculation': '流動負債がゼロのため計算できません',
                    'accounts_used': {
                        '現金': {'code': '1010', 'name': cash_equivalents_name or '現金', 'value': cash_and_equivalents},
                        '預け金': {'code': '1020', 'name': investments_name or '預け金', 'value': short_term_investments},
                        '現金預け金合計': {'code': '1', 'name': cash_deposits_name or '現金預け金', 'value': cash_deposits},
                        '流動負債': {'code': '3000', 'name': current_liabilities_name or '流動負債', 'value': current_liabilities}
                    }
                }
            
            # Working Capital
            value = current_assets - current_liabilities
            indicators['working_capital'] = {
                'value': value,
                'formula': '流動資産 - 流動負債',
                'calculation': f'{current_assets:,.0f} - {current_liabilities:,.0f} = {value:,.0f}',
                'accounts_used': {
                    '流動資産': {'code': '1', 'name': current_assets_name or '流動資産', 'value': current_assets},
                    '流動負債': {'code': '3000', 'name': current_liabilities_name or '流動負債', 'value': current_liabilities}
                }
            }
            
            # Store results in database
            for name, indicator_data in indicators.items():
                value = indicator_data.get('value')
                if value is not None:
                    # Set benchmark values based on common financial standards
                    benchmark = None
                    risk_score = None
                    risk_level = None
                    analysis_result = None
                    
                    if name == 'current_ratio':
                        benchmark = 2.0
                        if value < 1.0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "流動比率が1.0未満で、短期債務返済能力に重大な問題があります。"
                        elif value < 1.5:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "流動比率が1.5未満で、短期債務返済能力にリスクがあります。"
                        elif value < 2.0:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "流動比率が2.0未満で、短期債務返済能力に注意が必要です。"
                        elif value < 3.0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "流動比率が良好で、短期債務返済能力に問題はありません。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "流動比率が非常に高く、短期債務返済能力は極めて良好です。"
                    
                    elif name == 'quick_ratio':
                        benchmark = 1.0
                        if value < 0.5:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "当座比率が0.5未満で、即時の支払能力に重大な問題があります。"
                        elif value < 0.7:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "当座比率が0.7未満で、即時の支払能力にリスクがあります。"
                        elif value < 1.0:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "当座比率が1.0未満で、即時の支払能力に注意が必要です。"
                        elif value < 1.5:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "当座比率が良好で、即時の支払能力に問題はありません。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "当座比率が非常に高く、即時の支払能力は極めて良好です。"
                    
                    elif name == 'cash_ratio':
                        benchmark = 0.5
                        if value < 0.2:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "現金比率が0.2未満で、即時の支払能力に重大な問題があります。"
                        elif value < 0.3:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "現金比率が0.3未満で、即時の支払能力にリスクがあります。"
                        elif value < 0.5:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "現金比率が0.5未満で、即時の支払能力に注意が必要です。"
                        elif value < 0.7:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "現金比率が良好で、即時の支払能力に問題はありません。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "現金比率が非常に高く、即時の支払能力は極めて良好です。"
                    
                    elif name == 'working_capital':
                        # 運転資本はプラスであればあるほど良い
                        benchmark = 0
                        if value < 0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "運転資本がマイナスで、短期的な財務状況に深刻な問題があります。"
                        elif value == 0:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "運転資本がゼロで、短期的な財務状況に注意が必要です。"
                        elif value > 0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "運転資本がプラスで、短期的な財務状況は安定しています。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "運転資本が十分に確保されており、短期的な財務状況は非常に安定しています。"
                    
                    # 計算式と使用値をJSONに変換
                    import json
                    accounts_used_json = json.dumps(indicator_data.get('accounts_used', {}), ensure_ascii=False)
                    
                    # Create or update analysis result record
                    result = AnalysisResult.query.filter_by(
                        ja_code=ja_code,
                        year=year,
                        analysis_type='liquidity',
                        indicator_name=name
                    ).first()
                    
                    if result:
                        result.indicator_value = value
                        result.benchmark = benchmark
                        result.risk_score = risk_score
                        result.risk_level = risk_level
                        result.analysis_result = analysis_result
                        result.formula = indicator_data.get('formula', '')
                        result.calculation = indicator_data.get('calculation', '')
                        result.accounts_used = accounts_used_json
                    else:
                        new_result = AnalysisResult(
                            ja_code=ja_code,
                            year=year,
                            analysis_type='liquidity',
                            indicator_name=name,
                            indicator_value=value,
                            benchmark=benchmark,
                            risk_score=risk_score,
                            risk_level=risk_level,
                            analysis_result=analysis_result,
                            formula=indicator_data.get('formula', ''),
                            calculation=indicator_data.get('calculation', ''),
                            accounts_used=accounts_used_json
                        )
                        db.session.add(new_result)
            
            db.session.commit()
            return indicators
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"Error calculating liquidity indicators: {str(e)}")
            return {
                'status': 'error',
                'message': f"Error calculating liquidity indicators: {str(e)}"
            }
    
    @staticmethod
    def calculate_profitability_indicators(ja_code, year):
        """
        Calculate profitability indicators
        
        Args:
            ja_code: JA code
            year: Financial year
            
        Returns:
            dict: Profitability indicators with calculation details
        """
        try:
            # Get necessary account values with names
            net_income_data = FinancialIndicators.get_account_value(ja_code, year, "pl", "9900")  # 当期純利益（Net income）
            
            # 経常利益と経常費用を取得
            operating_income_data = FinancialIndicators.get_account_value(ja_code, year, "pl", "6900")  # 経常利益
            total_expenses_data = FinancialIndicators.get_account_value(ja_code, year, "pl", "7900")  # 経常費用
            
            # 「経常収益 = 6900(経常利益) - 7900(経常費用)」
            operating_income = operating_income_data[0]  # 経常利益
            total_expenses = total_expenses_data[0]  # 経常費用
            total_expenses_name = total_expenses_data[1] or '経常費用'  # 経常費用名
            total_revenue_value = operating_income - total_expenses  # 経常収益（計算式）
            
            # カスタム合計値を保持するタプルを作成
            total_revenue_data = (total_revenue_value, "経常収益（経常利益-経常費用）")
            
            # 残りの科目値を取得
            total_assets_data = FinancialIndicators.get_account_value(ja_code, year, "bs", "1")  # 総資産（Total assets）- BS合計
            total_equity_data = FinancialIndicators.get_account_value(ja_code, year, "bs", "5000")  # 純資産（Total equity）
            
            # Extract values and names
            net_income, net_income_name = net_income_data
            total_revenue, total_revenue_name = total_revenue_data
            total_assets, total_assets_name = total_assets_data
            total_equity, total_equity_name = total_equity_data
            
            # Calculate indicators
            indicators = {}
            
            # Return on Assets (ROA)
            if total_assets != 0:
                value = (net_income / total_assets) * 100
                indicators['roa'] = {
                    'value': value,
                    'formula': '当期純利益 ÷ 総資産 × 100',
                    'calculation': f'{net_income:,.0f} ÷ {total_assets:,.0f} × 100 = {value:.2f}%',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '総資産': {'code': '1', 'name': total_assets_name or '総資産', 'value': total_assets}
                    }
                }
            else:
                indicators['roa'] = {
                    'value': None,
                    'formula': '当期純利益 ÷ 総資産 × 100',
                    'calculation': '総資産がゼロのため計算できません',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '総資産': {'code': '1', 'name': total_assets_name or '総資産', 'value': total_assets}
                    }
                }
            
            # Return on Equity (ROE)
            if total_equity != 0:
                value = (net_income / total_equity) * 100
                indicators['roe'] = {
                    'value': value,
                    'formula': '当期純利益 ÷ 純資産 × 100',
                    'calculation': f'{net_income:,.0f} ÷ {total_equity:,.0f} × 100 = {value:.2f}%',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '純資産': {'code': '5000', 'name': total_equity_name or '純資産', 'value': total_equity}
                    }
                }
            else:
                indicators['roe'] = {
                    'value': None,
                    'formula': '当期純利益 ÷ 純資産 × 100',
                    'calculation': '純資産がゼロのため計算できません',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '純資産': {'code': '5000', 'name': total_equity_name or '純資産', 'value': total_equity}
                    }
                }
            
            # Profit Margin
            if total_revenue != 0:
                value = (net_income / total_revenue) * 100
                indicators['profit_margin'] = {
                    'value': value,
                    'formula': '当期純利益 ÷ 経常収益 × 100',
                    'calculation': f'{net_income:,.0f} ÷ {total_revenue:,.0f} × 100 = {value:.2f}%',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '経常収益': {'code': '6900', 'name': total_revenue_name or '経常収益', 'value': total_revenue}
                    }
                }
            else:
                indicators['profit_margin'] = {
                    'value': None,
                    'formula': '当期純利益 ÷ 経常収益 × 100',
                    'calculation': '経常収益がゼロのため計算できません',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '経常収益': {'code': '6900', 'name': total_revenue_name or '経常収益', 'value': total_revenue}
                    }
                }
            
            # Operating Margin (銀行の営業利益率)
            # 銀行の営業利益率 = 営業利益（経常利益）÷ 経常収益 × 100
            # ※ここでは経常利益をそのまま使用（経常利益は既に取得済み: operating_income）
            
            # 計算式と結果の確認
            operating_profit_ratio = 0
            if total_revenue != 0:
                operating_profit_ratio = (operating_income / total_revenue) * 100
                
                indicators['operating_margin'] = {
                    'value': operating_profit_ratio,
                    'formula': '経常利益 ÷ 経常収益 × 100',
                    'calculation': f'{operating_income:,.0f} ÷ {total_revenue:,.0f} × 100 = {operating_profit_ratio:.2f}%',
                    'accounts_used': {
                        '経常収益': {'code': 'calc', 'name': total_revenue_name or '経常収益', 'value': total_revenue},
                        '経常費用': {'code': '7900', 'name': total_expenses_name or '経常費用', 'value': total_expenses},
                        '経常利益': {'code': '6900', 'name': operating_income_data[1] or '経常利益', 'value': operating_income}
                    }
                }
            else:
                indicators['operating_margin'] = {
                    'value': None,
                    'formula': '経常利益 ÷ 経常収益 × 100',
                    'calculation': '経常収益がゼロのため計算できません',
                    'accounts_used': {
                        '経常収益': {'code': 'calc', 'name': total_revenue_name or '経常収益', 'value': total_revenue},
                        '経常費用': {'code': '7900', 'name': total_expenses_name or '経常費用', 'value': total_expenses},
                        '経常利益': {'code': '6900', 'name': operating_income_data[1] or '経常利益', 'value': operating_income}
                    }
                }
            
            # ROA (総資産利益率) = 当期純利益 ÷ 総資産 × 100
            total_assets, total_assets_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "2999")  # 資産の部合計
            
            if total_assets != 0:
                value = (net_income / total_assets) * 100
                indicators['roa'] = {
                    'value': value,
                    'formula': '当期純利益 ÷ 総資産 × 100',
                    'calculation': f'{net_income:,.0f} ÷ {total_assets:,.0f} × 100 = {value:.2f}%',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '総資産': {'code': '2999', 'name': total_assets_name or '資産の部合計', 'value': total_assets}
                    }
                }
            else:
                indicators['roa'] = {
                    'value': None,
                    'formula': '当期純利益 ÷ 総資産 × 100',
                    'calculation': '総資産がゼロのため計算できません',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '総資産': {'code': '2999', 'name': total_assets_name or '資産の部合計', 'value': total_assets}
                    }
                }
                
            # ROE (自己資本利益率) = 当期純利益 ÷ 純資産 × 100
            # 純資産 = 資産の部合計 - 負債の部合計
            total_liabilities, total_liabilities_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "4999")  # 負債の部合計
            equity = total_assets - total_liabilities
            equity_name = "純資産（資産-負債）"
            
            if equity != 0:
                value = (net_income / equity) * 100
                indicators['roe'] = {
                    'value': value,
                    'formula': '当期純利益 ÷ 純資産 × 100',
                    'calculation': f'{net_income:,.0f} ÷ {equity:,.0f} × 100 = {value:.2f}%',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '総資産': {'code': '2999', 'name': total_assets_name or '資産の部合計', 'value': total_assets},
                        '負債合計': {'code': '4999', 'name': total_liabilities_name or '負債の部合計', 'value': total_liabilities},
                        '純資産': {'code': '', 'name': equity_name, 'value': equity}
                    }
                }
            else:
                indicators['roe'] = {
                    'value': None,
                    'formula': '当期純利益 ÷ 純資産 × 100',
                    'calculation': '純資産がゼロのため計算できません',
                    'accounts_used': {
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income},
                        '純資産': {'code': '', 'name': equity_name, 'value': equity}
                    }
                }
                
            # 総資産回転率 = 経常収益 ÷ 総資産
            if total_assets != 0:
                value = total_revenue / total_assets
                indicators['asset_turnover'] = {
                    'value': value,
                    'formula': '経常収益 ÷ 総資産',
                    'calculation': f'{total_revenue:,.0f} ÷ {total_assets:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '経常収益': {'code': '6900', 'name': total_revenue_name or '経常収益', 'value': total_revenue},
                        '総資産': {'code': '2999', 'name': total_assets_name or '資産の部合計', 'value': total_assets}
                    }
                }
            else:
                indicators['asset_turnover'] = {
                    'value': None,
                    'formula': '経常収益 ÷ 総資産',
                    'calculation': '総資産がゼロのため計算できません',
                    'accounts_used': {
                        '経常収益': {'code': '6900', 'name': total_revenue_name or '経常収益', 'value': total_revenue},
                        '総資産': {'code': '2999', 'name': total_assets_name or '資産の部合計', 'value': total_assets}
                    }
                }
            
            # Store results in database
            for name, indicator_data in indicators.items():
                value = indicator_data.get('value')
                if value is not None:
                    # Set benchmark values based on common financial standards
                    benchmark = None
                    risk_score = None
                    risk_level = None
                    analysis_result = None
                    
                    if name == 'roa':
                        benchmark = 3.0
                        if value < 0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "ROAがマイナスで、資産から利益を生み出せていません。"
                        elif value < 1.0:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "ROAが1%未満で、資産活用効率に大きな問題があります。"
                        elif value < 2.0:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "ROAが2%未満で、資産活用効率の改善が必要です。"
                        elif value < 3.0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "ROAが平均的水準で、資産活用効率は普通です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "ROAが3%以上で、資産活用効率は良好です。"
                    
                    elif name == 'roe':
                        benchmark = 5.0
                        if value < 0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "ROEがマイナスで、株主資本から利益を生み出せていません。"
                        elif value < 2.0:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "ROEが2%未満で、株主資本効率に問題があります。"
                        elif value < 4.0:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "ROEが4%未満で、株主資本効率の改善が望まれます。"
                        elif value < 6.0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "ROEが平均的水準で、株主資本効率は普通です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "ROEが6%以上で、株主資本効率は良好です。"
                    
                    elif name == 'profit_margin':
                        benchmark = 10.0
                        if value < 0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "利益率がマイナスで、収益性に重大な問題があります。"
                        elif value < 3.0:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "利益率が3%未満で、収益性に問題があります。"
                        elif value < 7.0:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "利益率が7%未満で、収益性の改善が必要です。"
                        elif value < 10.0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "利益率が平均的で、収益性は普通です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "利益率が10%以上で、収益性は良好です。"

                    elif name == 'operating_margin':
                        benchmark = 15.0
                        if value < 0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "営業利益率がマイナスで、本業の収益性に重大な問題があります。"
                        elif value < 5.0:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "営業利益率が5%未満で、本業の収益性に問題があります。"
                        elif value < 10.0:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "営業利益率が10%未満で、本業の収益性の改善が必要です。"
                        elif value < 15.0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "営業利益率が平均的で、本業の収益性は普通です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "営業利益率が15%以上で、本業の収益性は良好です。"
                            
                    elif name == 'asset_turnover':
                        benchmark = 0.3
                        if value < 0.1:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "総資産回転率が0.1未満で、資産活用効率に重大な問題があります。"
                        elif value < 0.2:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "総資産回転率が0.2未満で、資産活用効率に問題があります。"
                        elif value < 0.3:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "総資産回転率が0.3未満で、資産活用効率の改善が必要です。"
                        elif value < 0.4:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "総資産回転率が平均的で、資産活用効率は普通です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "総資産回転率が0.4以上で、資産活用効率は良好です。"
                    
                    # 計算式と使用値をJSONに変換
                    import json
                    accounts_used_json = json.dumps(indicator_data.get('accounts_used', {}), ensure_ascii=False)
                    
                    # Create or update analysis result record
                    result = AnalysisResult.query.filter_by(
                        ja_code=ja_code,
                        year=year,
                        analysis_type='profitability',
                        indicator_name=name
                    ).first()
                    
                    if result:
                        result.indicator_value = value
                        result.benchmark = benchmark
                        result.risk_score = risk_score
                        result.risk_level = risk_level
                        result.analysis_result = analysis_result
                        result.formula = indicator_data.get('formula', '')
                        result.calculation = indicator_data.get('calculation', '')
                        result.accounts_used = accounts_used_json
                    else:
                        new_result = AnalysisResult(
                            ja_code=ja_code,
                            year=year,
                            analysis_type='profitability',
                            indicator_name=name,
                            indicator_value=value,
                            benchmark=benchmark,
                            risk_score=risk_score,
                            risk_level=risk_level,
                            analysis_result=analysis_result,
                            formula=indicator_data.get('formula', ''),
                            calculation=indicator_data.get('calculation', ''),
                            accounts_used=accounts_used_json
                        )
                        db.session.add(new_result)
            
            db.session.commit()
            return indicators
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"Error calculating profitability indicators: {str(e)}")
            return {
                'status': 'error',
                'message': f"Error calculating profitability indicators: {str(e)}"
            }
    
    @staticmethod
    def calculate_safety_indicators(ja_code, year):
        """
        Calculate safety indicators
        
        Args:
            ja_code: JA code
            year: Financial year
            
        Returns:
            dict: Safety indicators with calculation details
        """
        try:
            # Get necessary account values with names
            total_assets_value, total_assets_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "2999")  # 資産の部合計 (Total assets)
            total_liabilities_value, total_liabilities_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "4999")  # 負債の部合計 (Total liabilities)
            # 純資産 = 資産の部合計 - 負債の部合計
            total_equity_value = total_assets_value - total_liabilities_value
            total_equity_name = "純資産"
            
            long_term_debt_value, long_term_debt_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "3200")  # Long-term debt
            ebit_value, ebit_name = FinancialIndicators.get_account_value(ja_code, year, "pl", "6900")  # Operating income/EBIT
            interest_expense_value, interest_expense_name = FinancialIndicators.get_account_value(ja_code, year, "pl", "7400")  # Interest expense
            
            # ログを出力して確認
            logger.debug(f"資産の部合計: {total_assets_value} ({total_assets_name})")
            logger.debug(f"負債の部合計: {total_liabilities_value} ({total_liabilities_name})")
            logger.debug(f"純資産(資産-負債): {total_equity_value} ({total_equity_name})")
            
            # Calculate indicators
            indicators = {}
            
            # Debt Ratio
            if total_assets_value != 0:
                value = (total_liabilities_value / total_assets_value) * 100
                indicators['debt_ratio'] = {
                    'value': value,
                    'formula': '(総負債 ÷ 総資産) × 100',
                    'calculation': f'({total_liabilities_value:,.0f} ÷ {total_assets_value:,.0f}) × 100 = {value:.2f}%',
                    'accounts_used': {
                        '総負債': {'code': '4999', 'name': total_liabilities_name or '負債の部合計', 'value': total_liabilities_value},
                        '総資産': {'code': '2999', 'name': total_assets_name or '資産の部合計', 'value': total_assets_value}
                    }
                }
            else:
                indicators['debt_ratio'] = {
                    'value': None,
                    'formula': '(総負債 ÷ 総資産) × 100',
                    'calculation': '総資産がゼロのため計算できません',
                    'accounts_used': {
                        '総負債': {'code': '3000', 'name': total_liabilities_name or '総負債', 'value': total_liabilities_value},
                        '総資産': {'code': '1', 'name': total_assets_name or '総資産', 'value': total_assets_value}
                    }
                }
            
            # Equity Ratio (Capital Adequacy)
            if total_assets_value != 0:
                value = (total_equity_value / total_assets_value) * 100
                indicators['equity_ratio'] = {
                    'value': value,
                    'formula': '自己資本 ÷ 総資本 × 100（注：リスクアセットを考慮せず）',
                    'calculation': f'({total_equity_value:,.0f} ÷ {total_assets_value:,.0f}) × 100 = {value:.2f}%',
                    'accounts_used': {
                        '純資産': {'code': '5000', 'name': total_equity_name or '純資産', 'value': total_equity_value},
                        '総資産': {'code': '1', 'name': total_assets_name or '総資産', 'value': total_assets_value}
                    }
                }
            else:
                indicators['equity_ratio'] = {
                    'value': None,
                    'formula': '自己資本 ÷ 総資本 × 100（注：リスクアセットを考慮せず）',
                    'calculation': '総資産がゼロのため計算できません',
                    'accounts_used': {
                        '純資産': {'code': '5000', 'name': total_equity_name or '純資産', 'value': total_equity_value},
                        '総資産': {'code': '1', 'name': total_assets_name or '総資産', 'value': total_assets_value}
                    }
                }
            
            # Debt to Equity Ratio
            if total_equity_value != 0:
                value = total_liabilities_value / total_equity_value
                indicators['debt_to_equity'] = {
                    'value': value,
                    'formula': '負債の部合計 ÷ 純資産の部合計',
                    'calculation': f'{total_liabilities_value:,.0f} ÷ {total_equity_value:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '総負債': {'code': '4999', 'name': total_liabilities_name or '負債の部合計', 'value': total_liabilities_value},
                        '純資産': {'code': '5000', 'name': total_equity_name or '純資産の部合計', 'value': total_equity_value}
                    }
                }
            else:
                indicators['debt_to_equity'] = {
                    'value': None,
                    'formula': '負債の部合計 ÷ 純資産の部合計',
                    'calculation': '純資産がゼロのため計算できません',
                    'accounts_used': {
                        '総負債': {'code': '4999', 'name': total_liabilities_name or '負債の部合計', 'value': total_liabilities_value},
                        '純資産': {'code': '5000', 'name': total_equity_name or '純資産の部合計', 'value': total_equity_value}
                    }
                }
            
            # Interest Coverage Ratio
            if interest_expense_value != 0:
                value = ebit_value / interest_expense_value
                indicators['interest_coverage'] = {
                    'value': value,
                    'formula': 'EBIT ÷ 支払利息',
                    'calculation': f'{ebit_value:,.0f} ÷ {interest_expense_value:,.0f} = {value:.2f}',
                    'accounts_used': {
                        'EBIT': {'code': '6900', 'name': ebit_name or '営業利益', 'value': ebit_value},
                        '支払利息': {'code': '7400', 'name': interest_expense_name or '支払利息', 'value': interest_expense_value}
                    }
                }
            else:
                indicators['interest_coverage'] = {
                    'value': None,
                    'formula': 'EBIT ÷ 支払利息',
                    'calculation': '支払利息がゼロのため計算できません',
                    'accounts_used': {
                        'EBIT': {'code': '6900', 'name': ebit_name or '営業利益', 'value': ebit_value},
                        '支払利息': {'code': '7400', 'name': interest_expense_name or '支払利息', 'value': interest_expense_value}
                    }
                }
            
            # Store results in database
            for name, indicator_data in indicators.items():
                indicator_value = indicator_data.get('value')
                if indicator_value is not None:
                    # Set benchmark values based on common financial standards
                    benchmark = None
                    risk_score = None
                    risk_level = None
                    analysis_result = None
                    
                    if name == 'equity_ratio':
                        benchmark = 40.0
                        if indicator_value < 10.0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "自己資本比率が10%未満で、財務安全性に重大な問題があります。"
                        elif indicator_value < 20.0:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "自己資本比率が20%未満で、財務安全性にリスクがあります。"
                        elif indicator_value < 30.0:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "自己資本比率が30%未満で、財務安全性に注意が必要です。"
                        elif indicator_value < 40.0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "自己資本比率が40%未満ですが、財務安全性は許容範囲内です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "自己資本比率が40%以上で、財務安全性は良好です。"
                    
                    elif name == 'debt_to_equity':
                        benchmark = 1.0
                        if indicator_value > 3.0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "負債資本比率が3.0を超え、過剰な負債を抱えています。"
                        elif indicator_value > 2.0:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "負債資本比率が2.0を超え、負債水準に問題があります。"
                        elif indicator_value > 1.5:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "負債資本比率が1.5を超え、負債水準に注意が必要です。"
                        elif indicator_value > 1.0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "負債資本比率が1.0を超えていますが、許容範囲内です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "負債資本比率が1.0未満で、負債水準は健全です。"
                    
                    # Create or update analysis result record
                    result = AnalysisResult.query.filter_by(
                        ja_code=ja_code,
                        year=year,
                        analysis_type='safety',
                        indicator_name=name
                    ).first()
                    
                    # データベース保存のために分解する
                    value = indicator_data.get('value')
                    formula = indicator_data.get('formula')
                    calculation = indicator_data.get('calculation')
                    accounts_used = indicator_data.get('accounts_used')
                    
                    # 辞書をJSONとしてシリアライズ
                    accounts_json = None
                    if accounts_used:
                        accounts_json = json.dumps(accounts_used, ensure_ascii=False)
                    
                    if result:
                        result.indicator_value = value
                        result.benchmark = benchmark
                        result.risk_score = risk_score
                        result.risk_level = risk_level
                        result.analysis_result = analysis_result
                        result.formula = formula
                        result.calculation = calculation
                        result.accounts_used = accounts_json
                    else:
                        new_result = AnalysisResult(
                            ja_code=ja_code,
                            year=year,
                            analysis_type='safety',
                            indicator_name=name,
                            indicator_value=value,
                            benchmark=benchmark,
                            risk_score=risk_score,
                            risk_level=risk_level,
                            analysis_result=analysis_result,
                            formula=formula,
                            calculation=calculation,
                            accounts_used=accounts_json
                        )
                        db.session.add(new_result)
            
            db.session.commit()
            return indicators
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"Error calculating safety indicators: {str(e)}")
            return {
                'status': 'error',
                'message': f"Error calculating safety indicators: {str(e)}"
            }
    
    @staticmethod
    def calculate_efficiency_indicators(ja_code, year):
        """
        Calculate efficiency indicators
        
        Args:
            ja_code: JA code
            year: Financial year
            
        Returns:
            dict: Efficiency indicators with calculation details
        """
        try:
            # Get necessary account values with names
            total_revenue_value, total_revenue_name = FinancialIndicators.get_account_value(ja_code, year, "pl", "6000")  # Total revenue
            total_assets_value, total_assets_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "2999")  # Total assets - 資産の部合計
            accounts_receivable_value, accounts_receivable_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1130")  # Accounts receivable
            inventory_value, inventory_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "1140")  # Inventory
            accounts_payable_value, accounts_payable_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "3110")  # Accounts payable
            cost_of_goods_sold_value, cost_of_goods_sold_name = FinancialIndicators.get_account_value(ja_code, year, "pl", "7100")  # Cost of goods sold
            
            # Calculate indicators
            indicators = {}
            
            # Asset Turnover Ratio
            if total_assets_value != 0:
                value = total_revenue_value / total_assets_value
                indicators['asset_turnover'] = {
                    'value': value,
                    'formula': '経常収益 ÷ 総資産',
                    'calculation': f'{total_revenue_value:,.0f} ÷ {total_assets_value:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '経常収益': {'code': '6000', 'name': total_revenue_name or '経常収益', 'value': total_revenue_value},
                        '総資産': {'code': '2999', 'name': total_assets_name or '資産の部合計', 'value': total_assets_value}
                    }
                }
            else:
                indicators['asset_turnover'] = {
                    'value': None,
                    'formula': '経常収益 ÷ 総資産',
                    'calculation': '総資産がゼロのため計算できません',
                    'accounts_used': {
                        '経常収益': {'code': '6000', 'name': total_revenue_name or '経常収益', 'value': total_revenue_value},
                        '総資産': {'code': '2999', 'name': total_assets_name or '資産の部合計', 'value': total_assets_value}
                    }
                }
            
            # Receivables Turnover
            if accounts_receivable_value != 0:
                value = total_revenue_value / accounts_receivable_value
                indicators['receivables_turnover'] = {
                    'value': value,
                    'formula': '売上高 ÷ 売掛金',
                    'calculation': f'{total_revenue_value:,.0f} ÷ {accounts_receivable_value:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '売上高': {'code': '6000', 'name': total_revenue_name or '売上高', 'value': total_revenue_value},
                        '売掛金': {'code': '1130', 'name': accounts_receivable_name or '売掛金', 'value': accounts_receivable_value}
                    }
                }
            else:
                indicators['receivables_turnover'] = {
                    'value': None,
                    'formula': '売上高 ÷ 売掛金',
                    'calculation': '売掛金がゼロのため計算できません',
                    'accounts_used': {
                        '売上高': {'code': '6000', 'name': total_revenue_name or '売上高', 'value': total_revenue_value},
                        '売掛金': {'code': '1130', 'name': accounts_receivable_name or '売掛金', 'value': accounts_receivable_value}
                    }
                }
            
            # Inventory Turnover
            if inventory_value != 0:
                value = cost_of_goods_sold_value / inventory_value
                indicators['inventory_turnover'] = {
                    'value': value,
                    'formula': '売上原価 ÷ 棚卸資産',
                    'calculation': f'{cost_of_goods_sold_value:,.0f} ÷ {inventory_value:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '売上原価': {'code': '7100', 'name': cost_of_goods_sold_name or '売上原価', 'value': cost_of_goods_sold_value},
                        '棚卸資産': {'code': '1140', 'name': inventory_name or '棚卸資産', 'value': inventory_value}
                    }
                }
            else:
                indicators['inventory_turnover'] = {
                    'value': None,
                    'formula': '売上原価 ÷ 棚卸資産',
                    'calculation': '棚卸資産がゼロのため計算できません',
                    'accounts_used': {
                        '売上原価': {'code': '7100', 'name': cost_of_goods_sold_name or '売上原価', 'value': cost_of_goods_sold_value},
                        '棚卸資産': {'code': '1140', 'name': inventory_name or '棚卸資産', 'value': inventory_value}
                    }
                }
            
            # Days Sales Outstanding (DSO)
            receivables_turnover_value = indicators.get('receivables_turnover', {}).get('value')
            if receivables_turnover_value:
                value = 365 / receivables_turnover_value
                indicators['days_sales_outstanding'] = {
                    'value': value,
                    'formula': '365 ÷ 売掛金回転率',
                    'calculation': f'365 ÷ {receivables_turnover_value:.2f} = {value:.1f}日',
                    'accounts_used': {
                        '売掛金回転率': {'code': '', 'name': '売掛金回転率', 'value': receivables_turnover_value}
                    }
                }
            else:
                indicators['days_sales_outstanding'] = {
                    'value': None,
                    'formula': '365 ÷ 売掛金回転率',
                    'calculation': '売掛金回転率が計算できないため計算できません',
                    'accounts_used': {}
                }
            
            # Store results in database
            for name, indicator_data in indicators.items():
                indicator_value = indicator_data.get('value')
                if indicator_value is not None:
                    # Set benchmark values based on common financial standards
                    benchmark = None
                    risk_score = None
                    risk_level = None
                    analysis_result = None
                    
                    if name == 'asset_turnover':
                        benchmark = 1.0
                        if indicator_value < 0.3:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "総資産回転率が0.3未満で、資産活用効率に重大な問題があります。"
                        elif indicator_value < 0.5:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "総資産回転率が0.5未満で、資産活用効率に問題があります。"
                        elif indicator_value < 0.7:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "総資産回転率が0.7未満で、資産活用効率の改善が必要です。"
                        elif indicator_value < 1.0:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "総資産回転率が1.0未満ですが、資産活用効率は許容範囲内です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "総資産回転率が1.0以上で、資産活用効率は良好です。"
                    
                    elif name == 'days_sales_outstanding':
                        benchmark = 30.0
                        if indicator_value > 90:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "売上債権回収期間が90日を超え、回収に重大な問題があります。"
                        elif indicator_value > 60:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "売上債権回収期間が60日を超え、回収効率に問題があります。"
                        elif indicator_value > 45:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "売上債権回収期間が45日を超え、回収効率の改善が必要です。"
                        elif indicator_value > 30:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "売上債権回収期間が30日を超えていますが、許容範囲内です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "売上債権回収期間が30日以内で、回収効率は良好です。"
                    
                    # Create or update analysis result record
                    result = AnalysisResult.query.filter_by(
                        ja_code=ja_code,
                        year=year,
                        analysis_type='efficiency',
                        indicator_name=name
                    ).first()
                    
                    # データベース保存のために分解する
                    value = indicator_data.get('value')
                    formula = indicator_data.get('formula')
                    calculation = indicator_data.get('calculation')
                    accounts_used = indicator_data.get('accounts_used')
                    
                    # 辞書をJSONとしてシリアライズ
                    accounts_json = None
                    if accounts_used:
                        accounts_json = json.dumps(accounts_used, ensure_ascii=False)
                    
                    if result:
                        result.indicator_value = indicator_value
                        result.benchmark = benchmark
                        result.risk_score = risk_score
                        result.risk_level = risk_level
                        result.analysis_result = analysis_result
                        result.formula = formula
                        result.calculation = calculation
                        result.accounts_used = accounts_json
                    else:
                        new_result = AnalysisResult(
                            ja_code=ja_code,
                            year=year,
                            analysis_type='efficiency',
                            indicator_name=name,
                            indicator_value=indicator_value,
                            benchmark=benchmark,
                            risk_score=risk_score,
                            risk_level=risk_level,
                            analysis_result=analysis_result,
                            formula=formula,
                            calculation=calculation,
                            accounts_used=accounts_json
                        )
                        db.session.add(new_result)
            
            db.session.commit()
            return indicators
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"Error calculating efficiency indicators: {str(e)}")
            return {
                'status': 'error',
                'message': f"Error calculating efficiency indicators: {str(e)}"
            }
    
    @staticmethod
    def calculate_cash_flow_indicators(ja_code, year):
        """
        Calculate cash flow indicators
        
        Args:
            ja_code: JA code
            year: Financial year
            
        Returns:
            dict: Cash flow indicators with calculation details
        """
        try:
            # Get necessary account values with names
            operating_cash_flow_value, operating_cash_flow_name = FinancialIndicators.get_account_value(ja_code, year, "cf", "11000")  # 事業活動によるキャッシュ・フロー
            investing_cash_flow_value, investing_cash_flow_name = FinancialIndicators.get_account_value(ja_code, year, "cf", "12000")  # 投資活動によるキャッシュ・フロー
            total_debt_value, total_debt_name = FinancialIndicators.get_account_value(ja_code, year, "bs", "4999")  # 負債の部合計
            capital_expenditure_value, capital_expenditure_name = FinancialIndicators.get_account_value(ja_code, year, "cf", "11210")  # Capital expenditure
            total_revenue_value, total_revenue_name = FinancialIndicators.get_account_value(ja_code, year, "pl", "6000")  # 経常収益
            net_income_value, net_income_name = FinancialIndicators.get_account_value(ja_code, year, "pl", "9900")  # 当期純利益
            
            # ログを出力して確認
            logger.debug(f"事業活動CF: {operating_cash_flow_value} ({operating_cash_flow_name})")
            logger.debug(f"投資活動CF: {investing_cash_flow_value} ({investing_cash_flow_name})")
            logger.debug(f"負債の部合計: {total_debt_value} ({total_debt_name})")
            
            # Calculate indicators
            indicators = {}
            
            # Operating Cash Flow to Debt Ratio
            if total_debt_value != 0:
                value = operating_cash_flow_value / total_debt_value
                indicators['ocf_to_debt'] = {
                    'value': value,
                    'formula': '事業活動CF ÷ 負債の部合計',
                    'calculation': f'{operating_cash_flow_value:,.0f} ÷ {total_debt_value:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '事業活動CF': {'code': '11000', 'name': operating_cash_flow_name or '事業活動によるキャッシュ・フロー', 'value': operating_cash_flow_value},
                        '負債の部合計': {'code': '4999', 'name': total_debt_name or '負債の部合計', 'value': total_debt_value}
                    }
                }
            else:
                indicators['ocf_to_debt'] = {
                    'value': None,
                    'formula': '事業活動CF ÷ 負債の部合計',
                    'calculation': '負債の部合計がゼロのため計算できません',
                    'accounts_used': {
                        '事業活動CF': {'code': '11000', 'name': operating_cash_flow_name or '事業活動によるキャッシュ・フロー', 'value': operating_cash_flow_value},
                        '負債の部合計': {'code': '4999', 'name': total_debt_name or '負債の部合計', 'value': total_debt_value}
                    }
                }
            
            # Cash Flow to Revenue Ratio (CF対経常収益比率)
            if total_revenue_value != 0:
                value = operating_cash_flow_value / total_revenue_value
                indicators['cf_to_revenue'] = {
                    'value': value,
                    'formula': '事業活動CF ÷ 経常収益',
                    'calculation': f'{operating_cash_flow_value:,.0f} ÷ {total_revenue_value:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '事業活動CF': {'code': '11000', 'name': operating_cash_flow_name or '事業活動によるキャッシュ・フロー', 'value': operating_cash_flow_value},
                        '経常収益': {'code': '6000', 'name': total_revenue_name or '経常収益', 'value': total_revenue_value}
                    }
                }
            else:
                indicators['cf_to_revenue'] = {
                    'value': None,
                    'formula': '事業活動CF ÷ 経常収益',
                    'calculation': '経常収益がゼロのため計算できません',
                    'accounts_used': {
                        '事業活動CF': {'code': '11000', 'name': operating_cash_flow_name or '事業活動によるキャッシュ・フロー', 'value': operating_cash_flow_value},
                        '経常収益': {'code': '6000', 'name': total_revenue_name or '経常収益', 'value': total_revenue_value}
                    }
                }
            
            # Cash Flow to Net Income Ratio
            if net_income_value != 0:
                value = operating_cash_flow_value / net_income_value
                indicators['cf_to_net_income'] = {
                    'value': value,
                    'formula': '事業活動CF ÷ 当期純利益',
                    'calculation': f'{operating_cash_flow_value:,.0f} ÷ {net_income_value:,.0f} = {value:.2f}',
                    'accounts_used': {
                        '事業活動CF': {'code': '11000', 'name': operating_cash_flow_name or '事業活動によるキャッシュ・フロー', 'value': operating_cash_flow_value},
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income_value}
                    }
                }
            else:
                indicators['cf_to_net_income'] = {
                    'value': None,
                    'formula': '事業活動CF ÷ 当期純利益',
                    'calculation': '当期純利益がゼロのため計算できません',
                    'accounts_used': {
                        '事業活動CF': {'code': '11000', 'name': operating_cash_flow_name or '事業活動によるキャッシュ・フロー', 'value': operating_cash_flow_value},
                        '当期純利益': {'code': '9900', 'name': net_income_name or '当期純利益', 'value': net_income_value}
                    }
                }
            
            # Free Cash Flow
            value = operating_cash_flow_value - investing_cash_flow_value
            indicators['free_cash_flow'] = {
                'value': value,
                'formula': '事業活動CF - 投資活動CF',
                'calculation': f'{operating_cash_flow_value:,.0f} - {investing_cash_flow_value:,.0f} = {value:,.0f}',
                'accounts_used': {
                    '事業活動CF': {'code': '11000', 'name': operating_cash_flow_name or '事業活動によるキャッシュ・フロー', 'value': operating_cash_flow_value},
                    '投資活動CF': {'code': '12000', 'name': investing_cash_flow_name or '投資活動によるキャッシュ・フロー', 'value': investing_cash_flow_value}
                }
            }
            
            # Store results in database
            for name, indicator_data in indicators.items():
                indicator_value = indicator_data.get('value')
                if indicator_value is not None:
                    # Set benchmark values based on common financial standards
                    benchmark = None
                    risk_score = None
                    risk_level = None
                    analysis_result = None
                    
                    if name == 'ocf_to_debt':
                        benchmark = 0.2
                        if indicator_value < 0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "事業活動CFが負で、債務返済能力に重大な問題があります。"
                        elif indicator_value < 0.1:
                            risk_score = 4
                            risk_level = "中高"
                            analysis_result = "事業活動CF/負債比率が0.1未満で、債務返済能力に問題があります。"
                        elif indicator_value < 0.2:
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "事業活動CF/負債比率が0.2未満で、債務返済能力に注意が必要です。"
                        elif indicator_value < 0.3:
                            risk_score = 2
                            risk_level = "低中"
                            analysis_result = "事業活動CF/負債比率が0.3未満ですが、債務返済能力は許容範囲内です。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "事業活動CF/負債比率が0.3以上で、債務返済能力は良好です。"
                    
                    elif name == 'free_cash_flow':
                        if indicator_value < 0:
                            risk_score = 5
                            risk_level = "高"
                            analysis_result = "フリーCFがマイナスで、事業投資後の余剰キャッシュがありません。"
                        elif indicator_value < 1000:  # Assuming 1M is a reasonable threshold
                            risk_score = 3
                            risk_level = "中"
                            analysis_result = "フリーCFがプラスですが、余剰キャッシュに制約があります。"
                        else:
                            risk_score = 1
                            risk_level = "低"
                            analysis_result = "フリーCFが潤沢で、投資や債務返済の余力があります。"
                    
                    # Create or update analysis result record
                    result = AnalysisResult.query.filter_by(
                        ja_code=ja_code,
                        year=year,
                        analysis_type='cash_flow',
                        indicator_name=name
                    ).first()
                    
                    # データベース保存のために分解する
                    value = indicator_data.get('value')
                    formula = indicator_data.get('formula')
                    calculation = indicator_data.get('calculation')
                    accounts_used = indicator_data.get('accounts_used')
                    
                    # 辞書をJSONとしてシリアライズ
                    accounts_json = None
                    if accounts_used:
                        accounts_json = json.dumps(accounts_used, ensure_ascii=False)
                    
                    if result:
                        result.indicator_value = indicator_value
                        result.benchmark = benchmark
                        result.risk_score = risk_score
                        result.risk_level = risk_level
                        result.analysis_result = analysis_result
                        result.formula = formula
                        result.calculation = calculation
                        result.accounts_used = accounts_json
                    else:
                        new_result = AnalysisResult(
                            ja_code=ja_code,
                            year=year,
                            analysis_type='cash_flow',
                            indicator_name=name,
                            indicator_value=indicator_value,
                            benchmark=benchmark,
                            risk_score=risk_score,
                            risk_level=risk_level,
                            analysis_result=analysis_result,
                            formula=formula,
                            calculation=calculation,
                            accounts_used=accounts_json
                        )
                        db.session.add(new_result)
            
            db.session.commit()
            return indicators
            
        except Exception as e:
            db.session.rollback()
            logger.error(f"Error calculating cash flow indicators: {str(e)}")
            return {
                'status': 'error',
                'message': f"Error calculating cash flow indicators: {str(e)}"
            }
